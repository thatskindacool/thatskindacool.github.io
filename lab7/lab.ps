%!PS-Adobe-2.0
%%Creator: dvips(k) 5.994 Copyright 2014 Radical Eye Software
%%Title: lab.dvi
%%CreationDate: Tue Jul 25 08:57:02 2017
%%Pages: 6
%%PageOrder: Ascend
%%BoundingBox: 0 0 598 299
%%DocumentFonts: SFRM1000 CMMI12 CMR12 CMR17 CMSY10 SFTT1000
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips lab.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.07.25:0857
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: SFTT1000
%!FontType1-1.0: SFTT1000 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ectt1000, tctt1000, latt1000, lbtt1000, lctt1000, rxtt1000.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Typewriter) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch true def
/Weight (Medium) def
end readonly def
/FontName /SFTT1000 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-208 -360 1374 838}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA1B1ED6A435B5950D131BC48179F5BE3191944DD
8626DE76AAFD8EC4DC8241F2ED33E10698DC7741D6E45CF5A02FC6D2068AA205
EF3C4FDCDE803F4D1D4FF03A079CD4FC4BAB3C558A8FDDF53D34AABB7D89E4E0
CF76F77ECE57575C27718A8074CE275DDE4AD245220A8236400BE47BC76DE13A
9EDA4BD5744C71DB407BCA39DBC9D857122A1DA969E6D0915FDC1622AB8BB88A
93D2EE72E9A2FA73193D6CDF254252980674DB644EEB36A2036E04DB649F816E
E70C4C43E88609C8E8B8B84A920CA933FA00F41F2FC3C867825E2AC658FA0F7F
331323E22BD193A0A8009B3F0EE6D55281CF1076F1631FE509E79941FF08D0B7
ACFEE566C76FBC09F3B4AA57959D4EFC34413ADB46292ED99CC8EC4436DE2CAB
86B8B48847353E826F5346762CD5D353727DBB502E08B934DAE4E99894706BCA
DC35AA52C8610137C7E336009D564831E1E7936600CC3891D3A58A539523329A
45DD54B8D76F43582CE621F74FE7F8FB06E32612FB06B66CBB3096C0DD63D097
08C206A620CCC9ECB49CDC17295CD0B3C9D2DFCAACE46137490589D72A6A57BD
FE97C0CCB9087CF31EAA7860444C0D2A1B230F1879B1CD80CED3863680AE37F7
39A117963BCA696B1EFA8EA500DF5B1C5F6F42EA16D46CC0687DC684B2AE28CA
8511448362E82092B98752B7DBB96F23D9C921B6F04437045FC86F25EA3C8AC9
27C8391DBEB83E9490E936651BCD254A0614F7ED59FC0E5F8151EF1ED91D4762
8C13FEFA9C8810A396CB8F12098FD8F64CA95E29F2DC77FE8DF688AC53980298
1F44F40E3093158C0B0953148A3D3069197EA977B02A364012FF1B4BDD1B9B31
0B5232FF2FFF996405B237C9B547C6C1F421514700677D13707EBAF5E0CFC0A2
1FC6671D71917E35526C6D8BA4F9E064B2CA7A24D9FF5495F231E450080716ED
92A9E6CA7F65309188A9F09947B771F0F0E48ED1904B3476E0A2CAEA1D9C644E
3FC3F529A47CAE3EA4DE3699BC04DF4D12A81D958B208BF3A5E3F07DF039E95F
CB1DA01D1748622483B23129023D8B93CFE10E1052CFDA6C4492E6FA85780F3F
598C711118E05D5E165621881D0EBC56994A39A203CAEC81760F2D157FFD05B8
6EEAE2BD18AE4181B2DC502A421EBCF15C2ECEE2A60BD3A37312AECAEDF8B970
14531108009DCFEBF20E222C4382F21C586844D8A79A4FC0FF0C8901B7953557
6E7E9DE9BAE18085228CCEE136CB4D62885739D544AAE5E21F4D9D3444409FC9
537E57DD508803B12D56BDDA2BEDC9F5ADF118557DB3DA9711ACB1F370663039
58975EC622B314CC8305DF0012C9388C4C9A6A79E6EA75615C1BC2FBBA51638B
64DD051F04A2C9E2D90E47F07263DFB82B2B9CDF351205AFFE1EAB195E947D18
B66263722DB25014F7C0EF51C36B43FAFDB1B6BD555521ED4805D5FD377529CF
100A4D025334A0B671378BC393A6640D1BD5F86B08BC1FF9622682FB4E66F11F
3A1865CFAC5F54BBEC2F45774B5DB26DD5B2F6F85B0586750593AD0801138F23
6121A8B5C46576375F1BC07EB4CDE5F6B5DF8EFECFAE27F49E6F0A52ACEFBCAC
72DC2F1D7AEEBDD708AD93C0AC6A6CB033D72571700B17E52CCD1DA3CBD13B12
9F1FB31A48908324E78A58C383450F3CF96D919D9FB5B3818201648FD3241C59
C9CDB254989BFA7046D880592C2A0DAB509A45F891C4B635956F5DA32412E78C
A82D29C726211915F9448C44D89F32A2ECD4263E454F59D8A721EE49A2A7FC13
B789D7506C16759781BF9FE9ED826DADA4923DBB3532C8E33335CD1850748CB9
D0D028167051C477EA7C5D4872F6B02B8A82E7E1426445E7D0CADCB966F61D53
D7810F5A4FB1A9EA652C7AF13C690ACA2DC18916FADD1C9318D860BD87BF9D6A
2AF010E8DD0BEF5E8FD4268CC1FA3EFF9FBE7DA50F3B1BD434EDE8AB088F1F6D
A3C2DCCD792351662372E6AC1684D2C33545BB22F84A39385CA94F9EF405589F
15170FFD382568132096416D97216425EE0941F53141A330A4698DD1FB41E6C3
29BFD1AECE652A8E228796299F7BBC7ECEFCA14B5DFC9D36088FF740769FF65F
C383E1EBF4CE82ED6318CD3342AFA8C2997B51D27D4ED8CFF931E013208B63AF
2A8CA6B683F2305FAC22DF4ADEDE8735D678CD5024BE2FE3393BBFB654FA0B1F
4C12E3BE7615C82FC3000FED17EA056D12D42E6774A81F503C5FC983347F7EF0
5FF7F62F16F4E2CA734380757049AA7B8521B9D1A1EB74E767773F2E32BF5153
AD62E3C43ACB5569CEDF46D479F1361AF8C3D8DE66E7BCB5C50141EA9BAB87EE
2213B9ECF786E4AB95ECF63EF6E32B536B9845D05C11A2C60F3A084DDEDA9859
E014AD64F8F5EBDAA4FD05AF278D32B64690630E07C03D09DECC7F3DBFC0ED3E
34B5B4B74446CDE1FF7AA1A0D38DBABD698411041740F5A2A6C7DB7B2358EBC0
3588E3B62F13D0A851D5ED8217384099CF488344F8F9AC480826C8948995F6F3
6A3417DB2A35A3FEA7C98B379F161DCA24235E4607CD3CE27994012842AC4891
051CB0CC3E741BCF65EBF38F51CAA601BA828959BC1168F8121A68DBCFD6A49A
CA9FC01078CD46A7F9C0EEB8FA7709C320CFBF56E9A849C1D9021BB92D9DFDD4
862B5D12CBB82580832DDFF93BA686CF4081EA0B2951AB6BA2379BD2BD0A9B6A
9925BCA9868F60476F684CA9068A365DD2B17F99015287DD4746C530F0111230
6DD44BC8C7E39E39E2B6A304ADA49CAFD6160CBB57DA92A25ED21C6455AB5A82
266ED8F6D767A9012AFDDBC83A08E0AF1132BEC8CD9587C25E085F8835EF8D03
A4EF120447834C8702976ACCF7466729AAFBC1250D50FC08557C999B7185936F
C363080DF37A72E127E7444D498ECF9480E2185EEED4DAC3900DEB535A10B6E3
F94DF0ACF719E5F6F66F12DA59625C437D449B28428D721F0FB0B315F6881653
67794B8E4A43C20735AA3F111DF1A516724F104958CE1063DA4CF2D5568EB7FE
EF2749284C505523B4D39E06B16A97268DA46DF38B7D34037936969466D99A6B
5E670351BF4E12623A09B3C5D3AE355DF9C651AA32CFBC802747F5A501A02B13
493C27EFAED71D06B0AF3303959A339F11AC22ACE46B483AFA3E3852D507550D
2FE37DC05E3875216CF0A302488044F2E9812E57F4F2D842D72A47FA18DCA5D0
50551D779A4A279FBBCC5B1D2401AB575605254824A1BAB8EC4518B219257EEB
C0BB67D6CBC18BF6072271303B14731499E453BF3E8FB1ECEE6F9E9FCD63BCEC
470DAD523D09FE0F2088B67BBE921BC7C18EBC2A147D24863EE127632723E665
22593306DB2EF556B10F19B253DBB32A74122DF384B9ED1C4235800A3728D93B
3508B4EB817C1090636CEA94745736395AEC427C0C337D3251FF8E1C767F12D8
A7E2D04A45673976922DD95758D83D57AF3036219311B859A1A77426B4CC5DFC
5A672F5C893AB0A2983764B848FB46D304E2E860631A6363722DB25014F7C0EF
51C36B43FAFDB311F491D1CFFCE79F2D98C7A7D9183C5C6E2B2F9E97F17B7BBD
2635387137F29D0457FCD36328D85C1CC9A3EF04B4401DD4CF53361679562E67
613F274EE63C0FE9FB37A14C493D19C9D40FC304CAC934D15F548432352EE638
8FEABCD9034F7EFE58A9C1BFCFE6150CAEE0B0DA4E7335D97580B62E6B5D1437
4D2C37E9A6126C4F0E485E973BAE108946752C2E1C362158D02070972F86F673
35B52B9EFE7F6091BF3A9084447B363872C26EB360978B090F1E73124B3F8196
C3AAAF171EF214889A270D62C37119C2C4ABAF5722F4F4BBB7CDC021620E25A0
732B430896EBCE877028654DD2C1218D4CAD60210937E9604DBCB08F6E266C63
5F94724C1B4B5B2F717311011667409E1CF5C1B8AEF5E1B26AD4E34FC86D064A
5AABE6AD902DC401E738272CD80C2CDF97C3A5C4830CF8E305BE5C2C25DE993B
D984F2BF4FBFF48423324CBFA59B3B2E3BE244840F678322EBA23265BAB5D8FF
066C543000657FB68AAA09D5E3D1A91A9ABEDFB5E9C5012633CC89B943551899
492B28CCB42F7908F6F33903DC90234E4CE144E244A685A96C920B73E76CA3F7
35617AEC26BDEDBAB67390DE9249C5A9D18091B4E5977445EC2EB0E47F3630C6
9E43BFEECF136AC5D9070BA9AA6BA6E3A1DDF74D9CD529B680F5CEDE85C3299C
13270FC76B73B4744E15182125D8B1F394746866D557918C26BACAB4F93253B3
7B08E03DB0BF53C4D191C58552F1CD3A9186702A682A18D958022A5264E9B3D7
F6E292731C73719E59558A33CAA9A3941614B61A4A3DA50EAFFFF854908E81BF
0ED2FC7A7C0FEFD23739595F5959E806B7DDCED2CC26324BACBEF48698D4F832
2AEEF5EF45A81F2D36111B4CB94099C4D68614A975A31D3BACECE30E3DADBF75
5EC54AEB8C0EE218AA8828365710B55A76EF8372A74DF7FD8C17AE5C2624F99E
F49583ECE9B8F2A7DF32C5E4270C9C6A394011FCB599AE191A2FA2AC15CA2908
0693B2621D97FEC9765AEC134494FB14D78CD3CC03990B988849F1EDA1F828B2
22BB375900E038388778821C7B9F3127D1D8C963F01AD51125A2C53F6CB5C0B4
F8781E3A69A5277EEAA9284966E210822420A9A4C4DCBEE917CCB68BB810D509
FD7B4DE0216F464D637A5D56300BFD91EAAC3F669435FE809E420598910CF549
C4F92105FAB18988DDD8297A2D0511E4525A562F78DE222F6AEA2FBB3EAD6442
5E2101A2AAD9B6DCAD1950155BA1BF6AA8AAF0559C7C915411AFA552C4ED9FD0
0797AEE5169BAE41BF0589933DAA16F51E8DB68A9ABEACB2F60AE03C29FF2C28
7032798CB5A7E6E99FEF1AB1D3E69D486A37F0709C4DA6C1CF8AAE46D5DD4E03
E465C2D8931CDFFC3B0E77403C5DCEFC2DEBC3708B3ACE529931D86CF2748A3D
61892A8371530C062AF3A511E25AC0B17B4AD27E5708DDD28131006212EDE6D7
0A3C3FDF24EAF7D4C34C8DEF8D4B2054A8A2DCF5B80E486BA62BEEF51D7D6057
E668F3594FE731883B8F3E1B7FD8D21090480C82F2B80F202B035008B9F0EA04
6A4FC5980174697BAAAF3310889438048C02DD5F5B3232919B28CBE3E21C4DA1
D0CA8CCED4EF40A73AFE8FDAB4FF27E007E9399B9476EF2221C1E0481C95E198
2454888FE6A8F9B9C27FEDD528107F417A746482C4DCB73CBFF5CAB682C91482
0FEDE66AA40A3B2C60310C10FE84A914A095F6D9E0822C5F3B371BF360369BDD
8E92A632EC8613F5FD8CA44689E5D8C847D8D5E5F3015FD8891781C3A34FEB74
28C0BAA0F4C6CCACA739A584A2DB27C561C6517C420411D2B0624B14771C2725
1A57E18F81A5E0DC032F740A03C4109E8FCBFC257FCC618DD5963566DD674E51
3D791E8CB29B33EF7A354C7D6434EF90F436CB4C0DB73E0CA92121690131FB55
26200D0CD10436999D3FE324A15B6CA922EA3648C55D795D42EDBA512F431283
2B7426BFB35CDB2F88FE7C722EBA18B6BAF602E631BD20B0671EFF8598EB4C22
5CA2A12E50D312DBDF80B41E8A942DB1437F44A23AC7B7A8109CEBEB185EEED4
DAC3900DEB535A10B6E3F94611B42F5D97726C153EC014F2559DAF8ABF9D7A14
49A2639C310E4F2DEE07DF4B8D92610866B01BB8F1D3DCFFBFA86407A133C3FF
275D595ACC5B376A425B37F9D9CC8533DC59B381BDEA1930CB142C067CDDEEC9
4116964DCEB06D51B447E7F215BF69090B75DBFDA554CBC001084CC5E1D678E4
F19D98131F1FBC531552236FB40B53E3A579E44700E07BB6A64B8980F39611F3
2DC7AD9237628C403BB53CA7458DB1F0D03553A596539AD0AE3058A6A578FFE7
69BDE940DC7787B71902AA7777592B24C00C8368A9D0420B6F174F3A50ED7B3E
0DB87341A15D8BBEC927E288699B3DBEB852460380F3F67EF2BD69D798C01DB5
74902B83396DEAFC24FFC85431B554666EB618477431E8919B9F5A5AAAB9C28F
3DBEB8A0FA1BC438D77DDBFB33C82F4B7297D1A3755BCCDEE4619834FEB1E196
F885E201E1D8E1B791D88795EE88DB91412B64BFF5E4EE4268600F85CC0EC174
874F5EC652C6F2F2AE4F9C70AEF0927B030AD3B64BFBDC441C8398A092C8225A
D84C7F121D66140874153114B81A52D6916406B374DCDF510FFDBECB9703956B
A1A8B0EEFFEE506F1C674C000D6A4AE76C74B5C24E7555DFA9BF6E42EF554040
094307F31D2AAA22B495165E2F4630E3BE8B2565A93B241554424AB803C27475
3444FAEA7A34B3789B42519BE2E0584BEBA566A548F1F5EE7FC23EEE127E13DF
F1BE6F3E7C73EEF13C8E16109AD52A9AD5759B2D4B47FE5D968556C222F9AB51
7354C8C53AD699411A9F800BFF3CE804286AD8535A03BF0799BDAA3C034DE258
17F8A13EC4313FE558E960C7BEA3C448690DFA37F2C547AE07F9762A049FB646
4493AFE8384FDF9CEE30FA83953E0F9243ED0B2951AB6BA2379BD2BD0A9B6A99
2FAE74C8A479CE8AB6CFE5FF69257E42AA6F9D8DD23CEBAF3EA5FACA8687295B
3F4240036BD743A622DDA8BF976202FDD67275C7C22E4B77872620A1361BADB9
0C51D7055421B1E83DCA7167957BCD0824CC86C82450C5B998E3208363E46412
2D7FBACA70F7389739E4F95CA5FA01EF08AC34D8F34EBA988FECB2206A14EB68
CC5854E593A5F8193F671397761D701D8CF17E03D601B4C22121F9F58344E4DA
D253F6FDD85DA7B7AC84DB93CA8B818692657245795F4D2D090457DED099A861
AD98359CCB4EB7BC6FE01F558AEB982C1FEF8B02FBF55931427EEE0E098DDDCB
465699CA1D5EF527BF0D0E1BFDCF3E288C1A09E3323098099D505E55DC55BA90
76885ACA113F08C2AEEBC2391ACC2EBE58C96C9767C05495F231E450080716ED
92AA92F8D86D1EFD996D6C56FC42B85256FD82B2BE349001835F9FA687F8AB07
35D57A688896481B19B12FE97D91C11AE3C262A20202C318F399773BA58BAE41
7570D2B23AC299FA7D6CFD5DA7A965D754C30476CF9BD30E635F6FB8040D9EA3
4D25C94F92C71EC42A85B29C5B48A3053D9654A0D5DABB7B1A13BEF4C1573991
6855ACE75D72BD92E6C94CF11E61559E013C172BF87EE042F4BC783E36C78B30
B9D0ED8D410DC113F8E414A15B93C91245D3E0E878E219191DEA9BD6BE9EAB40
620DE64C662FB033DCA43DFE85DC7419A362C1C9BE175DCEA93A0A6C4042890F
8C56AA3DF2C37A7AD8F7098BC76CA1F25E0EE4B62823877D6AEB29959E694040
B63697279A52F99332C1E10A5B934A0857AE94FEEFE2A89830C9B6C8CF71B595
868C2854B569AA9CBB6272403C2BE129EAF9B11D3FEF6592962E5BECBE729E4C
1063C6147A0D79366CE29B7370615DF1E1691251E0F0198E9C7B56400EB13DA4
BC85BE0B5CB46F6DC4AADE06B13BD0178A924D5FD86A6DB4CAB81A16C9D75747
F810910B7750116060B438F8E349888884BECF691191D88E3363722D8F5E69A2
BE9F81F9133829CF75DF15654D3F9E163335F9B3729CCBD175F000EF52D6AF5F
E7C52CD3410CD75F1762444C55A1A01F6ACFD1E222CDFE7FD1FD37996C6B473A
5AF30429459146DEB21C8D4B202B93E78EB93636B2DEF8AF8000A248A366D5E1
26CA5054C00F7C869C7ADEB182C37521E8E08554897D7EBE23BDFFBC5AC36C9E
E081DC7C0AF8EE47D963479335B4A0FD9354253D9CB328E038F9A91CE40B6143
369CBF899E26E50FA7457AAEA32F518ED45BCDB8A8A3A42E9C779847006F6CA3
17C1A7351FD007FAD8686E71407335877E0A666EE9AE0539C05412CBACF296E3
0EBC12722EACF484E74C875AC0FC8E61F4EA1D73A587311A3C0A976F0DF67334
FD7EABF4E9A9F4E756059B62D8D361B90C51E0AE25212A52D33A0996485DEA19
FF11DF5E426FD9D567ABBE772C2B20F89925CFC5D85A28B616B9EDA1AB524125
52AD23625E9F0C7268CEF3416A0EC565C2301E3DE6320E4F7F571EA1D80C4786
3FB3BD99B714FC1B25E5412FC4A752061E558979B916EA0C01EABF9D525F8D01
12BB32C6C328F1CD6C562BDEF9A7D5DF58F776A2DD101911C412D933E9559C5E
7E303E115DE0D16B6EBB2B01340F32F4578998CDBDB745E015468A4B8BA66F30
0FEC7FD79A1F9C7B12C327308E0DED1AD1DED572771FCE11CE10FEE21EB1D065
3A1B1383535A4479E5736D9200BD1514FDDAD14287110FC9CCBBF3E021E72C1C
BA4328B9E86E1BAFC0456F4AA45FE68B8961D22F4A5CD9EC8F7545E5A168F565
A5CDF7A8C16AFC88E7BF70EA4BFEA152E0210EFA0727D573C2E4B68104C63080
640EE3EF6BE87EBF525AB40765F03C964347D332A7D8762978D068E3BA5DE4DB
71D32384616393B2378622A7A5D1984F9388D6933755C76FAD15479CA476045C
E9F0FB3A1E91394F79A28BD7C8016D0FBCCD4572E0FB99EF0AFE13427E0DA7F9
8054BE136461500471693B912992BC817E7048939F2DA8E84B1D79CF77B7A7AF
C5418E3C78B29D9975ADA230E03FFA5B36CEF1F23FD4DC5A892CF7E111BB1886
A94D8CA1BAEEF4AD13465DF0D603C48302D7E683BF122A097B6DDB5D752F7F70
16C903FC4F3019C0839A41FBB33246F317D2FAFB17DCAE007D85E79D5F07F217
B8C8F1CA5B00A629EF3B4989611E2EA676AAE26C1B143FF92C2646B15AB381BD
EA1930CB142C067CDDEEC9406BA3D1C11067AE570B270590EE76A4C6D2F8A932
258D1693C478E90F1546B2644286572D717058DA98B661B8538459AC97D82063
CB1732A7865772A3BF855220F975CCD60512C7458FCE101E307F7BF6AE29273E
ED5A811F20F15FC88947F2259C9AC2FCCC89176CF297082A90A2D14B53245AA7
57A209F005ACA548E2945BCEAB7A48089AEAB65213D016D1E500653F2599ADD0
094FAE8250FB52127D094CAC69AAC0461225359FAE9DAD99515B7487E0244766
EA80C49B5AFA3E6B1AACD5D76BB724A765E10A8650EDD6F01B4DD4E68AF23ED7
704564C832F41C5C2523C1DFFAD0CEA4924DCCD155655633F02A2DA6865481E2
88264DDE6381EB7E8BC519F0B2BE4D2D14A7E9F673199F1EE65BA360711D7642
55983C3006219F47465231691C2A969FA5578FBCB494B1A26121744435A4618A
55E0B003B841CAE775D48C160373080430CE5ADBA74E31C7A096E3E6D4040A1D
DC7C504D8D212C88C80D8D93B7BA065478C49FF53E6AAA020481DAFC14076E79
FD99C667EC360688F5269CEAECEA0500A1E37DC39E497319DCD60FDDF170BD84
F20047CC715F65147DFEDC4222CA1387AC2CACF4375869676204A8E9FBECA814
889852ACE42684F875D85370139C2EA98E2D3EA58670419D9D972854F54A50CF
406D5AD8AAFD99AAA9B7A939545360E6A2BAA8096D5D15D997C5B4EB9D4DD1BA
A727AC3DC228BB1F13217471001150E6317C00878A2D6E825230566C96DA1F07
5E84FC2FE0B2A3698E3F71635C5BAD8A3B73CD517C9B108773848FB912805983
82DBDFDB229F242848E744755965E3FED86C2BD3A09490AB47B60E204B169046
ABBE1AE5D4C34139973BA00CB10996927B3A9C2448D878FA41518DBFB8817CEB
B11B16AC0771657F8B47F141E32C494C6AA8296B3FC9274257C3ACE8614D29B0
82C90A21F3497A10935CE8F681DFF83E7AF220D53AE5E7388E86A129F62D7F31
4F142A4E62D8A4F3B357651436DAAD0331C628021C652E1E619ECC0CD90A2545
C44D1EBCF15C2C6CB0903B7D3719F7C661EBFCDC57DBB593202866FA78AAA7B2
0AFAC4C8572A5A86DAE0112D454208144261F7490D50CB35C7496A6A8D669250
626AF858F9A1959288FFB44BF9968764FF657D6D256F683EFBE41344163CF67A
DD26AE2A46535B40D7B63D2E7090DAF54DED15DE27B00F6EA238CF1150B712C9
15FD969E9454DC9847177CC07FDE84B57280CDBB8A4687B65DE1B5C115226481
57631FC167CEE0E23885631DA852BBA7DF379825E032F837D7039E8A3A4047EA
20DC3C44CBC754098A7069CCCE1AB81DFA802A308D6745F282F7CA2D3A11102B
9C6513638A99D65FC58BA9E925D54B4E8A7706A4B4749AAE7504F1CB38152C2D
1BB12C48B48814BC944580228AD7BAD884B8D528BEC859DACD80D3EB32855F22
81C7AEA7AC1EE47B0580FAA3668E52F131331AFDA08CC184B48CD83783D87F5F
BAB8F1D91E5FE8366CFF658167142FD66C35F84A671893F0338488B1D93F1846
E41606DD510D2C7D0BE9DD12EF3898CB4DE8AC3CC9FCB3772DFF813067835259
4747D6AE413523BD158E21E5FF517162FBBC72F43198DF7989FF9FDB15EEA35A
09F41B2649995FFB9C83D458F0DC3F445C8F76965F0812C1F0CBBEEF983C0CFF
9F26C4250921C4F14BDBF39D08F3896967A7AB97140DEF7D4088D3F2082D570A
1DC7EA0E46D41824CD07992446AF463AB935630E2289862A716C42F071140254
B72AC91B9698F9B3E1E96C16BFF8CFAC752200BAA2210FA5D0B28E0E12106916
1F74CF2E7E02ACF0EFB0ECEA2A062397B4FCF53FF2986C6E0949A0FB6A332946
C6E384FA45ECD89CC71CF0750AEDE178573BE31F459D996A2874CF821ABD65A6
B6728E9857F654BF51B4860E9E739AAAA54CFBC3966E3AB9F2CFB10808742F30
BEDA350762BBFE38C28CDCBBA6C6FE5C088D8C6971895C067402CC77A43C010D
A50246580A1AD4AC0F6E5FC6C284B2FAF2714C5539935F961B3D0BBDAAE3FEAD
4112D15E95F45DCA7D9550ADCC1E0EEBCBA4961D1CFA93D523F080F503E7B547
69B66FCB67BF06542E8C953B8112E1955C958FE635F09D4A7681A4473FD57E8E
BEF4ED065F3AAACAACF809AE9FA7ADC01A9C046453AABF255BA64C898393959D
F4063CEC6272BBE4F545755FF75BAB52FFE105A19D1B507987D34AEC3008AD72
6B6B1823B60F897AE3A0908278529D1E42E7EDF50D22B1CA70730E333E995FD0
39650C6EA111EA4B21D338C68ECEDCF5C1559B318EA43B7CC317DEED9F67FBAC
E974E46D03ADA08AA153E57F98C25D37FF1C96F47B840E5B9E736C677032CD9E
0CF3261363547B83B13CBE73020D728D1EC0E5A59156E01E1CD36A5D1279E08D
17792823471BF6DB8222E2879F3C8453882D5AFA3AB3AF782E48D7CE22ABE468
ED9C045EEC50728984BF50DDA0B83CB645B862908B06A797E749FD3F531C6815
544584C6DF7998945670D3F421FE0E81C0700BFAB42075CEA780403A001CA305
644A55EA5BA42F0E49F4BB5BDFC7063F24F365EDBEE298213FEF25CE4D4A29A5
FA29B477018D54F91DAFB7E9057FD562AAB9E5ECE5A08ED8285804BED16FFBF4
243F8DE58E8097DE67272F54E772DE956ACE0CA995B7BE5DE6559743FD462603
43B380D79C4462598DF2017DC74358D2D4AE9039EDBF9CA91F154528D74A9E26
BE2F2EA07E391FCC4EBCC92A6052E0BE7615C82FC3000FED17EA056D12D68C7F
EB0E95E5C800F7B8D0741303E40B3470A034AA8D3D190AC9A6022EA2E47BAE80
94D9796A89B6F0A72A9F666430A70EC989925249E88AF0774C1F63FC325E4044
04B5BAE9E5013D3D4DEBF3377F906BA2ACDC4483DCCB4308D51DF97F2FC9AE71
0302645D76C6C6A9C596F7B4D62166D3C11D0D92D799BF56EB9F8EDA3D910A44
F15C37B7F240A9ABCB9D04D794FCC21481D93E7E4BF058C1EBA213E925728EB3
D1369EC18B8B1BF4DE8900DFF9C5203AC9FE7A022769E77675050A368258592D
C1FE3940E249DEDCA4A0C9DB21E3EDD1958A2224473C9E8A4E3296A5158792F7
B595A9338E1ED63B1C903E50A5845203AF181730646B5D6DBF430CA68F43781E
19BF5AC59D728A23F53C409C626879B2745304CCCC0D26B724B75A212B0C9FD6
CEA9B33189CED6D603E8942FB104B1118AAEAA4D944565FCF14F92DDDDF27B0F
018AC42FDBE2170632444BD2A8CCC94C03276EAAE77E3054870B0425E199AC7D
748CF0868C70375E5682773584D3C3830922DD33FB8A1B931DFD9A48F990B60F
7E4498F6D208D48DEA6BB9603DA3B1F3271B5345C44BF6C375ABBB15A3322AB1
C6EA139168F5E8685603460298061C181F0B9FB0B28D20F7B6D9F780A5804116
4E64CC4490D44F9C176D33D18DD46E7FDBA288DFAA294C00718D077FB2EFA129
D784901004EB112AE678F3095597317C7F381777E4EBC7FE7488B912B29C5F45
FECF83B0953493752ED10FD264F04A46D32E5949C704C84D10F6D46D6259B422
F271A5CE762076F1EB7201D4CD3529D13E765F290CD789B4599C2C811F1ED8DC
D4929EFB25F516EF79D2369E33AD5279539B6C0EA39FA4C17F214AA3284D5400
68128672447B947AB2AC6F3AA6FC470AB52A34B6495884F19F5F9D223013F8FD
3EAF3845E153C2686551F97BA4A492E8E0C264271C72340FB9FDFC3D1161E656
372AF4CE5A63BD7E73EB78CE8AC3ED4A0978DC39AB7CAA72093A40A28C1A5AF9
2BAF2C5EA9C22816335734BB7B430E63567DF8829E6603AB0638F794B11C9F8E
AAEB1C01FA9C2B9E0A6C7528D37D4E8A542195FF7994AD68EE45EFD5F7E2B677
2F4BCE612DF4B1BA5D73686C3D2FEBEF1FEE852C5DAC917E30F41CE95A45BD0E
C4074A2DA43ACC97D99BFAEFDDE4695E023D7F7DC29C51B990BF48F54C9499FC
9DF776D381F7CB84087024ED123A69E8E2D183ECF617AF17F5BFC564560A508E
806E1801E4F42510852274E5195EA582B58E33EF6C9C3243247A5845C846C369
1A53B63DFFAA0DB3B168198AD580430A54AAB1C3238FB4A00607866794E7E2F9
A2B89179CE8545A716200B83DBA7B83146B2914CA75FA894C47CFE1D102938E1
EC3EA5FC1420D7194CAFAC7CCE887E303595F54FD6F36E44FB0A67CA4FD6FCF0
CE21B44220443B845D291AF72FBFE6D1897AE1379456A8F32CFEE4FA1C5BB382
627AC9B7F5565043816BD94C3184CC3804E4B67914FF3A3FECC4F46752947739
44A2B6234F964715719B27BFBC501D2F98BBCFE96ED008117CA2D05701B1BD22
CB19F98B56A71484D78B5CBE3D295E0DBC7D9360930725D9DF7597FC1E538791
67B2222AE4AF9E2AA3A52709BA37237B9A88AC1C36D2FAB00E4452C03090E36E
DF49C40AD6903B7AE3FEED9BDCAD47C282AD7697911ED83CA057BA85C2649725
BD3457EFC9A5F4785AF0D12380E33C666E66BF18391E77CEB2DCD67FB3C5821F
4684CD70084E267C753F853803E39C7F0556BD268608FAE43CE66CDA3FCFFE54
1BFA01E70786FFE3AB4647CC7C797466062E4DC6C940133F9033DE26994FAEE0
722E995819A4CD8D765464CA928AEF040293E5CACE1B21F8F364F7AFE35BF943
280E532A934832474DFE6A54CB6BCEEE52CF0393E64B4239C1A9F1A8DB8E26F0
387BBB80F86D0E95B0819C356919FEE09C63F338A37DA3DE886C3AA6D9B59401
68292AE0EBE734575F8365D2D678686012A9CF86A18D49687391138BAD62DB17
09A70C51DD48BC242EF5A9AB42C4F6CB06B802487078D0278A68E0FE15687AEB
89B3074DE9F078E994312214EEAF63F8D0B481C715869F0E77C5F82DFDD90063
425D1BCC31DE8337C2B877ED5EE4878C50F06A64F75680C4E78EB586A88A353D
6E4556BDEB6D6B7D1381529A7FCA0A820AE847681812E3B4AEA4D8CA79984624
2056B99D8C8EEC585E88F3B40A1A3F5D89C78FCF7ABF96D6709F7269C6860128
7BA8DF67B346CA026F44D0EDBC810200EA42793B2CD758FEADFCD01DF6FB48ED
C787B34E644F5CB871A6339B8D86C18AD45B098DCC97AAADC2E4C11086C2A9F5
08F106A73BB7AC9015087BE28F05E9C225050692EAC13AEF0DDB06BFB7420352
205C906356E3BA5536FD22AFDFDB89CE8AF4438E4BC4C4FB7F627A842B2B9117
E62ABD31BB357F8FCB7BD46146824BCA64947F825726B0A1CD2A33DCB6BD5B6B
C8A982535AC6E9C2EFC5812821D417A9C3AA45E954E6C74BA1640DE05F62318B
18F5FF28B9A33A960F264922952343AA6C9D64B390B0BC3079D449352DE81728
D4C127BBB5DB53DA04DE10AA94330D7F6BDDC249097FB80FFE094D4A7C4651F4
1A33C625E48873CF999C6B45FC6F9DDBFE7875E518A35B6256A2BDE95365196D
CE3774BD866FFB93BA5928A9FA69960C069E1BCFBC71B93A7743F87828B06337
B17D6A6026A1F39941061598C8449D9D25E2698279AD86998912BCBBD6669BD5
233728B8ED16E6D42FFFC3B79585B0D4C7770EE9008DBA35D1BE96ABE7D70920
0C3CCCF1298F5DB434B7EC51128087D8117E9DCE0E8E939BCF4B3E803BAABEAD
3706278A0A00405E649EB90036D6E803D24BDD8590F90F4824DBE03BBC46DF88
DDB70D05319AF672D9D59252F7066211746E1814DAF4486C621D7887E6D24D85
53E18D5C5D184BDA63166B55809E4CBA5423FB38A6DBEC4E96F8DAD128AF8300
1E8A3C6E1D1301EDEC3480C77974D8D0D0371A7F44DE683298534EDA0843C416
D38C1BD3EE71781A85E661FDE0CE6882A07C54CB74B523AA703FDE110BE38641
A755898C004F831ECBA1C6E90F8170ED494313E3F6652E2F4C5B8314ED49D248
2774EEB98FCE14553B862CBF5A074098E119E4FDB6E792FC24088F50EC728913
9837D3DC2CB700D889272CF24C20A0D1CED3E040F1C541BCA63E7919499D35A5
9EBE77CBCA30CBE175FA4C3B42149CCA7713C125767C5CDF680FDC4F279E2442
CCEB84056C4B0282025CBF03F3AD98CD7ACB9E6D10BC28DF4F94345FFB612128
9BD5D224B673F7166B9EB8DD33D956647ED5311EC85D7D87FC194891E7470A6B
1CD8C244B9A75971AA8DA3E48884D5D9DAA8270B84D517897057E2206ED038EB
C27230FC2303654E4D1A0EBDB0527FEB50212522C8D4156C9152A14CB7E6B26B
32AF11B5A2734B53BAE60496D4B4C7049F3A770A45D5467AD4A39C3E3A12FE2E
2BD0D4AFEBD89FE6F77C8B07CF37E3E2DF5442E4C5F08802111FF320EBF19F26
A4213C08F4E26D46FEF743C756A2382098A72FF6B0AC66DF65512BBAB3555B26
5132AB7129F6D5314F0B7971AD959C81143306C955DD39C6B1821305F5EA02AF
73118A41A4614FF276B14DAAB44FD3C9AA412D14F6D6EF08527A1F1498026E46
AFFB6123892CE541EB958A3F267721D6D2D9BA1B5709D8FE75D496910DD19067
6D423ABBB9FB8F6265A8EAB71BACC800FF402049BF5338EA5786E6D9510BB613
232CC88117AD594836AD9B1C52BA70AEF080929BC7064D39ED400ADC78BC5B4F
33E36E859A0D7A0DB9382C5B1ECFDAAA6FC993115D73984DEA53961C2D4DBA57
DBF6BD4E39413FE191E96140B64FED29DE6E1268E76FF616DAA51DF3B1B6BF0A
CB1B7C99C5586B725D1FE40BC8A921E4E39D2E3685D6350B12F94822CCEF7FB4
FB79BCBCC5709771F9887AF14C267C1CB22243AC7E72413CD776F6C050E13EA4
209B1D14824CA9779420A3F95B6305892A6E395FDD72CDA5E859F9EE1FB162E0
F9CF61E9006223E92CBD1B1B943C1AA99370C24B10E709041E765CAEFC99C0A6
32CA1902B750949408383EEAF0BADBC51037DDD271CA8659BD50AB82D47677C2
8C69BBE333A7D19FB93F6BC40B42A3F179832A5D9E77A3EBF5130D526A913FE6
31B7EECE0180E07A50F67A8E00A98338B200E8172ADDEECA4ACA59831002C02D
99D8D305E7AFB193B442517659C6C51EBB9A55E55CCF8CCB74BF1B5AE9DD2F2D
2715F9FDA7C80A2EEE072875ADABBD798E242CD2DB8B2D8CA972455534CD8DC5
2789B02F40DEE7EC1084B57CE522758BF7CBDF48D28C4DDF93079A2642CF23F4
06B3783D24AA88D5DB5E925FB754650E85A511EBB01D01195CD56464B9DE8BEA
1505CD175B18BD668A0B4689F496A4D5D965566951D6DE65E308F66953F23100
CDDD6F5594247946B106FDA19C1A3B0604A2F2C6DE740AB99FBCB98945611121
F5731533BEFE60AC0B5F96C2E836A0AC87F4E304CF614561A3BC4BF520287816
8D11439B3DF19637322ED1D213B49CD30634323B17A771A7A61B41C19F98F3A6
3182F94F8F317968C12BF5BC06440EC4067167F2E0CAFDEFE5BF3212259A5DC0
A06F7528FDDC6102FECAE58D2573E22A3BF2BF517A3575756B7D4F164FFC38A3
85AC932C8D17BE4E159D11328DF9A7D21294C257EB498DEA4FE04C3C256A0967
BA4FBCAD1AAC2ACF5739273F7873A164EFAF753BD50D619956564DF7746AC013
D8BC161AF03E6EDB7FC474E87FDB6F3B56AFE1B6A61D16C7EE4A38F30FFDF1FB
02B3052918AD4FE9FAD4B523BA84A2CE32F5EFCE7C3C45EB6593C58B8E851A03
7CB639939926B146DAF91D18D83AF7BC148498F04F23F8B214ED5E2184628C65
8BAFBFB368388BF07EEBD7A89EE3513704DA2B3C64D1161E1963E3B25537F26C
7C7B0B42CCA09D6157FC8CBECDE4E44BCC2382581186CA91A8BE71187F368B50
D507E275B4B4C2B75B54756B546638DF0B5946B86E63377C756E8520557C038D
C1338AC897DD84ED9D41199B130C522BBAC555A09077392A0F34F3CC6854EF98
6BF65063DF739FA9F9046142524FB20426DDADD70E4A83479A1446D42290F62C
FCA8E6185679AEEEDD68859B7A8D8A93CE82562844DBA78EE665F362D755664A
A7D6B7FD02EF939C69F5C45FFD14F04A546FCE15F8DDE2D81F4296AF01CBA81D
D77470628210DC970794D29864FE1AE67FCEE64CE04A61ADC9F5077B030FAA06
52A206A7ABC43D603554E132FB78F6843DA0B2594EE9642C49D20FE1D59B6304
6CE650447902EEF916396C5A07D8049D5A17102D7DB84C82459647C468988701
EAF0C4B0F61DFE6F39368B6E2234422A17E931E6AF0F6B8C4F251297FC2BF20B
08149ED113CE66C71579F931A9872F1A689BEF2A7BB645F8E223D8B46EEBA7A5
6CA262CA9BFBA5FE874035870609F2419BF7A4DEA00E6713921B376E7406F256
F8718361B43CA02DB2C0F0A8250D0E5619227D8126C6D28845850181CD42EF2E
C8A806386DEA08E54C68A2524CDB0FBDD745BE910D44DD2BAD04D646478F84E4
836D27E3C932118A88C2EB0FA1C951DB0ADD125F3F0E3E487A11F4E4ED26530C
B1B2C5ACB70311FC1D03ED4115C6DE1823882B73913847105CD08EC104E8CBE2
B69FB8CD5DE4BF3821B876F520C3D9EABFD92C77F413E9465983395EFBA5444C
AC1BFFBB47895FC0D95574BBD3AF9957F014BA70362DF66E204268BC4A9B843A
740751B1038FFAA04742058FE11FA11E9490DDE2658DF0FCAB048E8FBE346DC0
00C02040AD4102EC84DEDEECFCD5E0AF6EB6F319F03EAC132F16894A704F192F
52EC203E405F48F339DE67B23AA4C8B47CA36C73136FA03D799029CE01D0CC0E
22DE15E318D8E095D7601BD81EDD908928FA6128F0CD6C540D08D499BB2BC9FE
41E797FDC3A90D621208CF1B21E795D6781DB760D6093695B5C19C760AA0D018
2733943B6F21D7E2AA75E63AD6C738A5BB90BEA7419EE8EB8244DEEBB357ABCC
C9EAD49833AD1FC0B7F8B8317E563103514C6CA5940C6CF164F2097267C7C6BB
FCDE2F5586557C55E7273614CF1AC52516191F8214ECBA866518648AA5F22E5A
92A46F186DBFF195DCD9B3C55D8085E2EBF77506EAFDAE7D8522A5EE6D6AD503
7868522023F368624D8458C84ACBBDA4D68833A559D26FF4540915B038118445
9AC169545B6615C24CE96ADB008CFEFC53A2CDF9A1E2EB3063FCA511E25AC0B1
7B4CB789A617A141E3C84C587EABE8B76CFCDF617FC263A675CFDA92898664FA
AC7952CF94BE40C8D257870A18C5A469611D9D4D5FC6F98A036E86105FAE8A56
3D6C6E37FEB6C3BBCE756785742B9DDBED0789AC6FA67F38BEC6FB49DAF4913E
9C608A83178548090E02919E4A201831F71CB16389399A34553666547774DBCE
4FF97F9119649A69BDA0DEE305F83E771B5AFAACB13BB94C816950EDDB3732A3
C24D358373DDAE6D768B1765ABDEDF5CACB2605BFEDAE595738B082B32F14720
0F65EF55031CD38EFC48EBD2582EEF3F7CCE15508AE4074AA6B421B33A4C45AF
6A8C082BBACF47714565D427CCD0DA4BD2AE743A49497AFDE231616B40364AE0
FD91B1C7D4CA87B116CD804D0A719CD4E8F3E681751FBB466964587B2F57EB8D
5467C527D12FECD175FD8C849B57A75801EF639AFA70D1493715C7F455300669
F0B9741DC6D8AC4A83514A162481D6B9B76F3695B0B1C3AC8E1C849DF7C9017F
D007C2E6FB4A92310231BDB4E06E1988D30B77B0CBA5B894F99949C008FF6F71
8FCDFF1EE14548C355C4B5E86D0D55FD429996322ACF4299819170052641D8CA
B22E00B1CC120A64C8290DB4A3187A3F63BCEE11A4C56D6E16583FAD4BC172CB
6EC6A7924FCE4E3B9815B8D3B274A1B0F30E9E697EFAA5C2C0165C712FA39151
BDCC492A24A9BC12C952BDD61FF28518B3724DD5DF8423AF953E9E9329C8F467
4895672B8F0C4B8563D6219B3A9D82BE7964C7E052517CEB71717BC4E2324659
08E9E888E905A9DE8A1EAA15C8310670F11875F632763E032D8D18DA6369EA5C
4EECC58E03373A8A800758FED6ED30FB66CB45E6F6696499B94253BD694EBD2F
C3104E28F1BA3DC80FEDFC03A0E65796F1A3C57B6E5968703BAFE0B7A4255CA7
9EFFBF6BA86CC36C2CDC9FCD728B291A0288689D9A1CCE52D73F708A9CA4B9A6
01761A5E224350C95D70C2EAB95A1698FA154975C15A9386F0E3B180931898DE
CB8205C7F9F15728751331DA13851D1B04F8D93268DDC0B538B1BF021D8ED017
C8AF5BEDA5B22C02F0E15DFECF3C077C7551BF1BB7D7EAA8C639E5EAE869C5F2
699B53D5C79BAC678AC5C650C13A3279E6AC59B79FF3B2407906652934045E4E
C71A3CA842A6235E343A01A94B4F28882C701EBADBBEAD0F46F1CE20D0966D23
A12CD5023EF39D3B2FB467D74C35A99620B2750DDEE8963F35C9AD1CDD5B5C57
E4EDEBCE7A95AFCD03982615563EDE73605E33B1B0E45E186DEEB6E7FDFB84ED
90CED66A698E6324212FAE9A22CC60739504BDCB140E3F68E579B459A406E1D8
5CDFEE2D8EC10EC4D12ECEE506AE3B526DC498385CE13B21A2AA543CDDAFC1D1
3DB4735B8015CCE2A38F312FD3D7798FACAD3B7370933611A6C3560A2A2E726D
201916D583BCDE2D21E2C2BED6DDAA9055EEB5474725F376AEBDCFF96A856193
33BF3870875287143D5950FC91D0DA4726729E66763644E14615E05BF6E98C9F
E410D42351A72369FD96114D71719C1181AEB937709B94D8D065E823BCEF512B
3BD965F5B565D32493F40B597FB63A3FD4CB6DCCF36EE883AFA30B03ED18A99C
E066A90B9D61FDF5E9CE08A2493F81C2866D5CE1BE85206DE883E2D93634978C
0897940717193ADE36A61E6D66675D6950D287A94CF9C93FF667FF675642AEDF
D65B657E7523CFAB546E613CB48B72AC3545211BE59FAD51FFBA9CDC50896439
86EB635B3386E362EC7ADCAF98EAD761ABFAE1B269FCF77C04DB00F1A96BE906
BE588EA95FAD164918688A7C0E4AC40A21CAB57C5EF59318F155CF537F98FA04
320E3267D990D44EEA94ACBF5A8551535C58DA5D9DB57B1758314AF80AE4C484
805FE3D545AF6AD00BBC1154F701F3FBCFF878B960298D1627E5DD2BE89CA003
720FC49B91C0BFF6E811A8097DEB8A1F648FEDCC7935878DE6B31623771560E3
0A519F2CB6BC7BE008A519CF73210E56DA81E333E1D39F30F6C3579C03206BF0
02948406AE9F1C2F98C9FF245A9D5AE4A04B529CC5F9772192F3101A027D530B
94E445EFDE8E0097A3C947C579A7EF3623BE31DB5D3C332C85D41B86B92A15E6
CB3B15DB4E00B462CF7CD47B1E35CAA83AE6AA32067DB113812AB0BC064884E5
25CA3D66A9AC72E524ACA0ADB47A93610A96083F97397911E60BFC3B60D3A0A7
6151A94704E28798B4BB88F676EE000AF083EBE9B553CAB7D5F165EDCCF03C50
05CB1BED3A1BC2865EFC5983C22F49D565EF68CBA363E0DF26393180D394B569
F2D6F18C291BE7B3DB17E8FDB124B11B6774D56171718A5ED56557E4A6C4D68E
47BA7E96A4A8D5870507907507ED492B8DC2B19030F202109BECA97D655A16C0
C26855CC85FA8268ABF028FDD8ECF80C851E4D5714E70B1E2C989EE6806F5268
DD7B41DF8BAF54CCAF46D0339DEEDBD48EFF2EA4BD68AFA0BC98B11972948F45
EB35CC471B55FD89466E93A9F5981F85C1D3A3A2286D8C7EB4594601ACFDF132
F2E7834A686A89E3C4C847162EBDC30B3A7A2DC59BD6510DA3D91C2ED1539A60
46DDDB512666DCD6594737F441DD965824B7FDEA8F45079AC8DF24B4F984DB6E
A11EBFD274DDA3FCAE379FBADD0A89C0AAC17E03C86003F853F1EFFBD4745F91
54F9515571DD710D88690A3845A5435B70B1AFCB2AED49DE0687D4D5857311A8
00A69312874D8511BD47543E22BADD90F8573637B555E71147D523BDE7BB3812
47F44FABAA4A31660EE294D4961963B468EA893F30C85D367E1AA2D7517656B5
4DC757EB0441804B139F93DEFC6B06095CF22D3D1FA8B5485911C4596399D648
F19909A74AD69AF4E9705C82B554850793A09177701C73B514F692CC55C02D2C
A7D3A64EAD2E627D42E95EE31C8F5673B44C20F81CE677D750A7056F6907C732
CE00F637CE7842A0DE4B4E505B5ABE95A2ED60781C858F6E6E37B1FC65DB31F1
EF0B9251CD7D774CB3EBAD79C5695017E27A4011C0CB02559E8B90B384D9375D
749CE06A40687FAE5568D5E08B4B786BEDA7A9549FCD17F090563928EB7B19DC
E48250CFE2687882D304CFE1A4269E5E4A33A1555C27C73D19E9537688EF6301
255B2FBB4E528A9CC55BDFBD5CCEA65322A74B2559648A22F17EE1C1DA914B50
09190D1B21D3382EF7ECDFD54D76AA179CB516D7274FB64D7A0D4634A82B1FF6
5A82401F255D6707E4BDEA6DE170E6696E68CC777DB13EBCAB603E3A96319412
9130E6936AF27B3621E4C186048B3E19BF81F62E47AADCB322B78A97F63A8D6B
AA4DF5368420EF654A136AFA346F5C944BA7A18B3EE2B87190DE9D271EDB2A35
A3FEA7C98B379F161DCA242C9D9281BD360AA9CF68685FE7988389765BD7D72A
86A8D1B0C114EB4FECCD818CD777FDBD648E9D483630D24F446E1ABF47D5B0E9
844EF6213340B86FE438BE5D36359D03CC1AA6C244AE410069FB3F1F51421F24
71006D41333DD349993FCA197D504941120347FCBF67F7AC49B171E87AF4ACA3
32BDC211B55A76EF8372A74DF7FD8C17AE5C262D2519F9943FEE8AC04D6CA6B3
CC02002C4BAA90857610208F39FD775A2397E6D2ECF6EE084AEEBC90496D960B
2EE969CCE27E84B510D9DDCF50F0EF0C2148458327A48F3E722DDE55B7904569
998D74B1DC13AE97E45B91B875F035D6C142810D3D474C7D71A010AA8322098E
0ABA72D6C88AAD6DA7B17DD7A5642ECBFCE2BFEA33DBB24BA46385FC9AB0E2FA
148D62DF3440F95E97DD9B83E4200BB0609AD46F23A1F4322E02319BA2F314CD
2E4B7428B5428706AA068952F0A577C9E1B65FE23DC114ED5F4718CACF575934
A5736F106E7D1FF36B582B5445138B798D6A5AC1DF4BCFAD1DF96F82FFCC4145
600659F0D4C10DDAB0C4B416622528D5460A4B9223FE40E54F14F0D6515CBB57
70529ADE02E0D4CCC029B3C232811CF0E4B1F2BB0824CADB8C4D2466A7AFF955
705487B08F95B957814D9E3AC26BC06BE808E4078768C2560A54EE68DC7A3400
604B560A58EA2466D7831862E93580DE45B4119BDD6B39E62270B9C6F890EF8B
690D8D465CBCFD4C3335EBE5F2FEB88BC2A0282E4037CCE936BB4B16B8BAF001
9F9735668FECD0653933C658F2B7748347467AAC9B3AF9336173B7433E4AF5F7
AF0E606A892A549D9872F089F84FAFD9E8ED2A24847A04449975FA46330B0176
CE3208FD2498D0F0674F05A2F219F87BF2F2515EAEF808054C14595310056603
961136BF5ECE14AA45FCCD3571671507317EEF3064DD28CD502881D30E137838
B8BA1713900A735F7E0BCDD098906620917821EFAE9BFB32E6D3C3317B330F33
C892AC77FFD4AE4B2AC1083E33A7800BBDCBDABC57592D03CCC7532536BE0A17
20E908BE2CE1A3B7F0D86FE3FC469C6F0B3659F056B37F0EAEFBF6EFCB3A63B4
1BCBB1A8C9A7838F84AC5C034246CFA84AA40D9AD1857CFBB80496163BEAEB09
C564CB630DCCE324DBD53C13069245DC12FD462A935F4B8F67241C6A5CC4616E
FBB385D495211B89A23539CAED4DA27A8335B08DA30C7227DCBCA27DDDF7A259
E0754091F71F8BE69750B103DB1714017DE10509E6FC6F7C9CA02D9EED192F6E
70540AB66E5C5934AF6B367A8432F8FD41717398165D62AC570F04A8E4CCE3F0
0E9E697E7DD01DB73C75503FC425D4A7D685E658D4128F17A3AE08342A415AA1
F8751F004C8F29C2758053C6505C189C065B9E617CABB37D68988DC77F428284
5D720CD0766760C6971F4255BCFA95FF346471992DC051B6634E8EA3C0579D95
36A29293C5194B91445BD7E21602116AF7C006F2E69CA1659ECEC98954552A3B
63FAB21D5E445746DBEBA7760B1B2C2A9E5D45D698EEB767B9D276BF1F211004
ACE6267F35500897F213D155340CB859C60809A9F78E45BE34098DCD726F5EF9
2394C86A6FFDBBC6A27EB82D99534B3FDDB19F5A119FC9D641FCF55E6D6D7923
48D031D5556EAFE397ACC1B898D4EC9726A104D9601F647D3B89066A22AB09B6
BD5540D64F052D9223943787C54A613083A42214D2F125623232376C465AC9FC
FEC3A6603CC2C9BD3B16AB6F3C877462BB8BC4CD8D00B3DC62E6AC2F06BAEF03
EE07C980BF88BF68071DCAC8B8DF983FCE912033CE5C07EE11754075A8A966A7
858330EF39E8BED044FA0B304782B89AA09C36A90A770EB9288D6BF0E6223D6F
14CEB82581732FF5BD681F0893BC0CE06C8533321BD15C885BDC593A2B8F23D6
DF3A75C620A6606E52BCA5F467E203875FDF113B12964E3EA41E1A328BB3CBFD
FA0EF19215BC8F61C776FB037EB78941F92320DE4402EC81E5D406DCA20DA83E
152D137AC702F538EB067026599D8707AEE1D3FBC520301DC50C27C26F422B95
4C28941F7D629E27D5F9636FE57A8F036B2716FF4A319C5FE61A64BF55458807
C68F9783FF987C5558A6DCD6B2699F1DE10ABAD42163EE7CDABFA0FB13B4243A
F632486CA33EC2E9DC065D05D634E538CBD92339CCCE549E4A7C653BC317F89A
8134D297E9D4D629DEC88493BEA6BEA39EE354CAE03ED38DCED849B8B7121155
CC018CFC91A98A4BFE80B45093472AFB5EE9C9FDA8C2E11A5924B8DBE57147F5
96B272296AEE9BFDB7B1535C7B84D44194ECBCAD9BDF878AEDC3204814EF7F43
9A96ACC0379E6C7B8CA3E2502D74A17C439FB6C392AFD85C1B936A837965CD3A
7FDCF9067117A9CB2BC8A7E5FE9FB569A9C25E9A7CCC8C5B68D5D08602272167
DDA9A382634AEE540B0F7940C659903B3002C8A34C0A5633E9E5D059DDE4F7F7
5E0FB00FB59238494BB941F2C8903192CAAE8A14B95868CFE74CD8161E90B8C7
D900193CED0B6E1698F529D156CF9EC35F0C8543DF8E4E2B8E6B713555C3445E
D4D87CC434CAB6F0862FE61DE9A01F9C49DFBEB24C94C93ADC954B9B33A1C2F8
FB2C1EB3612193EF72D192F98B083C59C71C42270FAB291ACED3B0453ED72FAA
D53C1D85E0635BF92AC4DEF726AACE3E7A76CB066175EBDFBC8C2EB17A2A6F7B
D45DFA7A8F697A832BC2B4EBB6EB1C817BB432D224F255519FE4D8E47122B4C4
DCA0E1F5AF9B4C6439A262E4CBB1A8C9A7838F85574204D8427F3D2A3273A90E
3A10C2AE06E67023FFFE24EB172AD76D8A58665DC05AAF4FB412CE0CD8E1AE35
13A858BCB6ACFF9831C5E926B0736818BDF1AB7414D018C3E617900617EFFC32
157DB64A00B3718196AE2167A622043D886CC97318FD3A578ACD7189A161FF67
C1D2A6975A93859EBC146BF5F47A6E431B730A159303ABD13F17C5C1E396A9F1
68172C281B9442472C288EDF404A1CD42588490F2026A4B467CF3BC505FB150E
5625EEAEC3150BC98DEBC4C4EBD6FD73A45ECF3E31C1B2412A4D1634035FA6C8
65FD4EFF8C9B7A7615E7041BEC8D06F7BCA8F1A86B1C60BCEF3D1FA2AFF09F46
B07493FFF139EED8986BC2DFA2288375E79E97CA4078F72CB8939C3400B20F87
F0E6EAC6BCC8F494D0140AFF99BAB5002AB259AECC3597C92AB2A04044665FE5
DBB7240C3A6314C079D30CC5B5E3296488871C1C1855F9025D8D8AF092F62BCC
CD8FA9C5BC7ACB1B4F92DA221B667D05417DC181DFDD42F404CCB251100B02A7
42C072E08ADD5169C8851B8B180D90F46B6ADA6A93AFCAE0A19C437CD4A3179B
B612FB367AA73CC4D1820F33F2FDEF9BB991CBB13BCD70FE8E4726CC689C65D0
FC8A1F5A1384531D632B7C6F1CE6D01D300C1235C256C27ADE0787C769002951
047263055DA1CF2FD5981E7A6E6CC230AA76F7698704994F74C02386E1C9DC33
BB27F0C971530D4C28833B3F06E41716F7029C3F14D963F066D9AD6D79C488E8
B91B5B17660E3A61D17494E55513B00D9339276024201F42E6EA777EC5919FCD
8560C517C725EC990FF9CD4DC059EF4000F8F9688EF504C662AFEB96ADBB3045
9B03B7B99914489AA00CAB542B9B9480CB9848A1CF8F1C324AA2628C2C357437
298C5348628A2CCA0A60746ABB24BE1001451B0B763452E165FD249194380B7C
3281D4BE33B073D305EEDE1EB680C39545EC08DC7FCF32D52DBB29BAF0B4826B
A649BDB41FA412E41FFBD0BC1E53E7A6C9C8FD3921890D7AA49E9A6F7B341CFA
3BF2F6356C7F3A2884B73FBA15AC9A1BB50E41D70EF755D720214F532D9EEE72
B631C1A8686F3B26F3525F7DA826F6C87D0CED77C1E25E733797DD82E445CC2B
46315814AACA4816EA56C96EF6243A905B0A64EE9E9A411F7A5CA6A6D8A468AE
202327BF25C2900C480430DC7EFBE7F83BFF3A13E7CB89F35D328D9917B73A20
508F57C51D6CC11B33EFBAF5956699B827377A83605E00E2793BB70776EE4CC2
63C78A42F14222C8235F28442D10D7BB3F8944855DC5A9694453AD2190A983A3
FB2B51A1F2331228AE3620EB270ED88A5AB7FC725DB003DC6DE3B1050C9DDAA4
DEC87E70AEBE821EAB98823DA01E3D3377D7BCA0BD29379FFE0C24ADD5488208
C439EC6AEF82947676B98BD62619B2090BEE8342B25145B54C04B603815D01ED
0FAC5EA1B082A831186D491AAC69EFB0E75965850AEB6E9D70ACA38CD934C2EC
B7A26E41F647E65DDBE93968CBEF93BDE3FD7CE31FA0330BAB0A1D2FBC8741F6
F0CA5404977A5DBD6FBFF89074584BB136D04485D79ACFD4EEBFDA7BFEE1F3A4
FE6EC5C42EBB3B3659986F40BA0492E75ABA0AC585CFB250D0421B2FF5F043D1
B9B2BEE5ECCE4D3B3D5F2CFF124701822662C3C58F8722E9B88FB482B8F35100
7222D517EA2F97B8E217B787124B109C571C8E771B56D27557D5FD1C845BE07E
769F4EEEBD9E7A4D6CB5874E333F5E0F29174F3E67AB1F1F271DFE05856C6E22
4951036E69F8E7748727A15AE18C87E1F1A11BE2169D2912CBD8911A03316992
1D7EB8781858B6D67DE63D2FD1B1EF87807890D0677385196783B90D697667F2
DC93B39C4CE186666A61F978113D2AB6BD5771CCF14FDC1B312098A7356ED7DC
1868E75C4C3A03FF0A8E7C4CE6F85F63BA24340A48A4248805A7B5C67458F795
9DBDF311E56898EA55885CADA50BC3818CDED203A2C15C6F125904B5BAB96FC9
44780701DEC5EC9554645FC0090C18A7938CAF0D887DD893C1D6B61EB380575B
984565C14431F5848E9FA64AB3C138C357277AFD78DB502022E411EA3A90D6E6
9F49D63790A48530BB2AFDA017971EFB411171A602FAB8ABBE1E950468854FB5
7711BCEBC82D2E974A85A76BFBC84349D6C3CC2076C9A0F1CE3DF1DD5631C461
FA60FA742CF4FFAAA6C8F1849ED2ACB5C8BD2E1831C7F7B6F1118AFC507FFF42
8FD783582330616A885AB455883C67FCD8EC650C7C4F88225D54D5ED4B95BFB4
84279C244833B52947692A99B76F891F8B4491CEC8FC4039EBC350801ACC919D
0ED4D3D21709BAD6E16CDEB3A2E9D511BD16E364ED7C4F5DB720DA91EB001CFF
04C35EB3AD05E340EAF666B154B2FB5FBF9D2CEF13BC9FEFB68B4128885172CE
D86CF19F76F5DE2EF593F5A79DFEF4707212FF88762915A7319D78A54E3A4A17
33F66700716D7C541D47987B49EE9318BA38A9029ED070EB04B7CA40526FD5EB
6C49C396406873078B7F82A5AAC847D757ED3106A8AA445640AE493960A7806A
CE6A6A1BB1532177038006472768666DC5FDA22F73E4F724DE5E4E190C78CB14
B43CA1BB44043F9084869F764F99B41D1CFDE8C70EF9805EC60ACCA942A0A951
CA61277F09667C97AB29A6DB10D449F349125AEC533BF70D95898AF93801EB24
B79C65C56D8D3812B3A8639C8EF1FBC65A319E54B88BDBBAE9CA97B136FE6D17
12FB6F359E9D9486E4A4B3583C21936C04D3763A3D3556EA115CF35D110163BB
C4E68A47A8FB69A3DCF2936A368C776BCC09B0C03B6C207D758C7F41
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B15A0
657F5ED27D204449A841ED19E01432CFFE928E921321113780D036D34F2797DE
D4459CFD15BB117B5C9745EF3CD2B296D91FAD48C80B136D94476967E255F808
AD2B5D522ADEC64176833756510391815A1D4A8DA1D0AEE7CAD36A1D161889F2
3347D5B6BC503300FDDD48F594F391D5FB42C42113C538E707C16EE24A3F375E
7C506E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349833BA22D2A9012287D8B
A8C4CB4307A1188ACC0E6E9338E1559BE5FAFF381BD82A6C71C267409468B3C0
2C1A29F4281D565836EAE57F680490FEA4A952FF64C8CD11C377C294DCD1EC25
CEFB2B6DCE959D0208F85B6E32E9B44FD455F9B134A5306D95EA29F37BB8B86D
9E592159338E1293F449380E13C21AE42E692F6C00B521F7AB2F32545952358F
0D39246DE215D0A7EE67F377E81F9E65B25658B7FD97FAF98C7EA9161530404B
62B9AB7A91C863095D5433BB06F9A29488DA84D58A1394AD7878BB27E3CF4AF1
BC29DC64F319758518AB652F9E8BCA586D3D2021CA860F84DC0A2F61A93B6B44
F08A7F7C5F36FEE9F5D450D19F72C09580DDE2B3747D8A1054981BAEF31D6C42
040D7D5F37DE6DE019849E7C7754DD27E9511F9A9AFA4FB727695444F739448F
3D2021
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.0: CMR17 003.002
%%Title: CMR17
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR17.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR17 known{/CMR17 findfont dup/UniqueID known{dup
/UniqueID get 5000795 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR17 def
/FontBBox {-33 -250 945 749 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR17.) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9D6295729076BD8E
CBC0F4C1BE246922D2482233846A96D867B66D9CF25A1DB661141D36B8506E61
A022F9EF8BC1F2F674EDF1533E67A78CA29A612AA9268E113C5EB84DA56CEDFC
D7A111403E6E2A8682DB04368889747E003A124395ECF0C7FC81218552EE7C6F
60BCFB4120893528670D0E8A4117EA5676915E3591AE5652D003EEF67818A41A
8882E102AEEEBECBD15DCF632ED246A6A58B6A7780DB6F1F9AE3FDAC8344585D
E104F2BA2DF06D68945889A2A3B6C262FB53FC670BC5EB7C56887FBFB7AA7026
84115872CFB0652C6BB330447AFF8F0F665EFD6A41D6DB6877B08052F402448F
CB21C26BDC900636C99CA347B79AA73AFCDE9762A992CA3DDF7279E5C50F453F
52098529850AFB1F501A442D6A02E0A2896F81C8AC735AF1E7EE47208B4CC944
649DF6802EEE813F1456205C6126D7D0B1821AB62DD65468F3A30575E491623E
0054E2E680E4402E1C8C538DA389B81603BE88D6DC287A076F92B224CD58A0AC
44B8D490197341808DEF243660971F444A560C747BC6F52707ED42A99736ECCF
EBCB694A561C3A70A319D204CD40D402FBF937A00BBCBE85DD26C9E3F91B7D10
D85B9D314BC3AAD5A58B107F5F341BE2C53490924142566417D6BE03BB4977FA
6635EA58DEB9508E40B9FFAC75FF44C683680CF242FE210519C9BF92483B0A54
83F48341318BE16D2F8C988FE3DB2E7914581F579D5E323148A31E4ED03BC24B
C990372DF5F3B0C5FA32EB2CA4FA0EA33316569133C87697BAA2292E685C26CC
F8CD40A2366E60B47D47CC9D0FA29D2836011376A07F78BA7664DE96E775CF45
9BC91559A063073A4C2FAAD0893C517C5C46A1425D07EDCC2B57162E3A45103E
FF26A2D2F98B194256A4B052AAFCC08965A50EECD7B9E8F35AFDF7B6568B3983
8030655E7C2BEC961A2F20539D617626E8454E3FE9EBD3EFCEF7F63498441DAE
16CB509BF239FBBE25EFEF07A3E16C9C71EB8D9DCB8403916FB40FD7F4E1A52F
72F2DFF94FD14D7D49FE775390C17C37C1BA0CAF35CF75D682B7833A83224158
D54CE962CFBAFB1B2CA50B60CBEB1F8F58DDB2F5470C355ED9632342D9382AE4
5D33BCA3A0A25EE9E5B39BE5370E7F20684C664EDB48E7973FEDAD9676F9EE8F
701CD4D8CC9B9EBC06E8C86EB88AD56E15CEBB8E1930E8F711CB6E01D5D14967
D7E6C1BDDDE2C4D00384EF4CB02877DECC27AD53FC981338977BA0CC0257CF7D
B42E9BC91AF45D9722461EC3CD9DEAA8011FB855FE14B74BE0A102008EACA2B6
0E287BB4F466FBFDD6E65A5262B9322F95E20DAB875A10A84572D982E6FC7ACA
23C0C37E5EB47B8E69C07507B53CDD98CD1B6445E1699CF35B3DA3E0DC56BB76
F997C40E2ECE47DBDDB707EB527055960113F2DABC87FD9EC7D0AB36B400CE33
0D54D4F197B2830B43DF0AA802DFB2BF747A4C44B31FB708B2C8BBE1955A6A28
379C91AA4CC065A50098AEC0B837E180B76801865A43C74859DF18FE1DA1483B
C17843BF1C7E1B11A8C6D8BB8CDB1D552FE6A1FD0A696A8F7405F2320F8621EA
17C1A32056C45A9ED35D2BD12D02D8B26489CAAEBF4EF33B66FF4BD9B46E4823
6395831A8F3366EEA0D0EA88D612DEBF63DA7FAA24DA979ACC1A52544BCAA007
6C39946BEA6076ACF45722B2B8E4D0823EA2D12B14A98367BB0433A21FBD9F94
18DF298C56F67ABC9DB1868D431A854DBEDF8E1F49E359A545C75A7AA1FA4D5A
50F1EE6B45FC68ABF65FFF257964E4E50D8B0C1FAF498DFC554073697C2F219D
4A68DA9E873B270B9C56F0DDBC9927ADAF9203FD684DE615F68C24ACFFB44690
89C0D5322049FA69E7FD00EFC9C9B2BD177B5B339907F81C31496662847BEC1E
56B5DCDF4FE618970F4268F475B2EF7E0F28CC986DDF098E59DDAD818649CC35
4080C0867A884B8177A6880F06F1E5CC130AB4243EF8DD8032FCF390765BAB1C
1F0C9728EEE261A09F8C1D7ABC7A6B1550551BE2A7D19D45B656650DB00B3A5E
B3E1186043E173BB4DD5EFFB379654F88146382AE3F7196F099BDCD6D245FB6B
AA2FA9B6CFBC9F0CD52798DDF2F13874BDE5B124DFFE0DD93E24C9DAEAE4C3BB
71A9A13AE2860F620B4EC789F95221015D9C510CB4AC775EF69DB9E32E59C896
1AF82C9F0DCDB4812A37761859A3D3BA0CA57F244489C78065346FFA78F5F7C8
0B2E8CBA9EE62FF5C27369D0BCD52857D40F1FB8F8A1441B83565A4150AB1945
0B54D6E49F66389E43096269EF5CDD39526A288C0CB81E324E75D326EC9A182F
2CD966368CE300B41873B08E17C3E6BB51804460D2562AF5A12339966F44CD09
114C6809AF246B5BA6937631842CB9417781A58944B6BA4FCF961465C208957C
81A662D560D0F81BD3CB53C06B6D979F04F6121CCFD5D52702CBF6C70C01EDBF
2040AAB9CB144321E68C4010E0E98CCA2603EB55DD62E881DB621C37EA4108D1
528ECC7A0121B57C6BB1E26F8AE7161ABA7E88256D2D6A8B7CDE2E730D137493
3FF628EF6030DD2330D747FABBA03B44CF600418C245C388F33EC5559E7313BC
4B530C4FC12530D38B27D6408548F25FC084DD0523B27D29D6518D3115AE7755
37162CFD4CF528214466FE525B13782F9C3CD78F3D6C7423E63A134C0A371F15
10F4ECE1D482C647B563D3D15586F80BD9DF7381BD53927825D5AEAF762E1CDC
3BD184F345029A95B3AD4D1B66E79AB4F0809418C0CFD4D503457A190D02F134
3F57FC04FF655AEEB783D6791E4EC300755861837D3D50649F6B7F60766211B3
8148F8E575E28D6C2DE75B15E722ABFC6DAADAE53D89FD295352781DCC2CFF6D
982F6DB778D6FCBF1B7BDCB53F3A23AE6EB499BBFA96E8BE04C3C8E5B660EF24
01EB842DAEBE979F2C2DB72AAB4D21627063B1D3C6CD40944E4CB81655698FBA
A343766CB22E392E5DAE01DB33A00918D6DAA07F2F38B336A3C5DF3708865E75
0DE04D3AFBCA27A249E97377D5785B4E28EE0E93F7D353619C200DB967372ED2
153BF8BE945474266EB2FD30F80042A11B7E3586DE4AB1FBD4A741D36DE583E9
1CA25DA345520AA60634EC819E7EB493CDB128BBADEC3890F055455F060A1100
D5A41D7B180027E08AD6EE7E393DB9F83799544404FE397F557773BE6A130541
157C0EB37E036C94825B5090EF85F8B4E3DB72895D86687758C20EDEBD6D1079
196E9949DC6ED0113571C70B150B37E446E319EC54D44CC0CF6A14760953DF4A
D0E1F33A54D240E236AB63B35BA8E071D77776BE5B9312245F2C6E4FDB4312A0
0D9CF723E7D9A3D8546C4739C00C301A89ABA60A02757AB1A0AC40B24CE6CF12
5850485B11E16646D7150795EABAEB08364A53161111F46A7BC3423A0D3BEB69
BF15726C1F8363914945DEEB29CB8766328318AF3B344FD6D77BBB92BD7FD161
93356493D4D8252AD125708D47C124E44232FB2BF7DD75F87889496DCDB75D03
F58A57D4122CFC194B75A9E9C4789C9A33C0435FB4ADA16AD4A6191928D1663D
05FB8152C0AA176FBA4755205F8A66713404787070757D3721ED6E6D55A59DF0
C92BA8F05EC7BE05D0A2E66DE85E75373483EA3BBEE0F0DFC7E2FA5FBAFAB118
058D095AA71FDFC8AF37E5A98406B64E58BF476C6926725D7EF3C2346CE3F662
1E5A4A18D966479A37070859014719456EA2C7F23E68E1AB2F25ED3A0C00A18C
DD403506923BC983F89CCA125780DC76A411472E38173BC0DD4CDA7B43E13419
B5AB0B9A35E77C58BBA12AA4F5C7EBF8A29996B059E4FAE6809565570442AEE5
D56CBF4407E1CD9A4398B1F3ADFF023F64B230E3D29F526B62D964F5C8DF801F
E94295AD85BD9E1C18E6327977260A871E921C0745CA06A263E335E344686E7D
D6FE3ADB4EE0A7E462F3C00873C3E95D183CCEC71C0E5DC1D2FB310B28FC3611
67C23DE336C374F72368F4973052B48E39969305791C986E6EE35D0350571860
3A8ED849712CF21AEF444BA390644E8646CCA16559BA4642A5800827A0DDC453
7CA0818BC47DF6348A5209A2F0A10CA39840CE6346E89CA0E842BE8692DEF25C
4623A5A0E0B98708B9492E9F564324BB3872D6B953CA59E9F393C477E2AB85EC
C557D333E88C111CF995FB79D9432DC94C2BDB3BFEE13C0D7D1BB920DAFA6158
8548447AFC65CD5515D5021E0ED7D213B0C08C35BB424AA91885CA023D7AF767
B83E619B15DFEF5588D2F0564296E14B5A6ACE03751E1016105C51BE76EA5ADB
4167BAED2A8899031FD7BA05C410ADA25ADD94A787EED1A7AE133B0568B1DBA5
44B41BE013782CFCA3D81E8E8210DD506ADFCE7DC7E792EFEF438221164A7D1B
5E7089F476240C5F94988F081943F24DBF7CC3D1E58CB89E1C0C1624682CC3D8
C95815ECC9183A4B3E353C7F920B7E64086E01672DAA7C8A81319BAA03C1FBB7
8E5E84CC5BAE0E107754794C755B7AF00953504094E1A9DF357D51B578259613
8D26F0BA26AAC459BBEEB90BCC98B865EDD26AA4DF533D6624EDAC762C446B6F
CF9F86DD2D8989D4655775E662B93BF51805EE3CBA0AE2293D95F166E80973CC
82C53042D0249C598B0821E9E7F218BA6114EEC86C158F277934F2651490B723
7F0D0288560DA5BEBAFDDF243048E590871AD18B3B220EC56549004DF122AA03
BAAD6971D790BC644369FDBEE74A324083CFA9496C2A333774F06E35299242BC
F4B26578907CC5AD1893613F2B8622CFBB7B55810162EEBFAAEAB2A6D69CB72B
D7859C73843E665125FF450631F32E64F13A6207F368103C7A7318DBAF2560D0
F1CDD83C3E48CB30C62AF1E0896E1962C655D9ED98E1BB38477C1C60ECDB6B95
067D3A638AD43EE886338F7AD2D2A574CE6FD2E21F6FCB4220EFEC85ABF8272A
82081CE70E4390A74EC717F1DDD168F4A4A080A79EE2ECE0F98A96871DA4B52F
78441601AF47763C2219F5A167604C32F478D498835EF3A6167936994F7C7139
3019FF43C97E7978D3CDA641C1E391FEA572D308E759F28DDE2B40B5BC207A4B
C5EB6A93EEE26782016F8B6534420BE4D790A2E1A65B6CDBE9468152230384FD
14E9AE84418A44F94E6825DD7D77D0BB5486DE26A692B3DA96C81FA4440C5D44
8E7F3CAA9B8DF38F87E09C4D78841F629F78F4E7CC8580CC44E59E5D9AE8B2DE
C0682F793AE7AEC12A8AE688636197E8A08FEB70EFDB6203681A60223B9B0D39
2DA656E5E99B82130D4BE38D7AFE18568DD30B0CC3C73C1E2914ACE11A65334D
A9F18135E7B86157122CD221C33C62012FFB16D2D2F3473A53BE3E7B9FD4303F
66ADF0B07155C7B9B002EA68C6AC7247EB3CE7D2670A60138049DAA964F86A05
22983EDA7242E6BEEB90DF61C937399B2CE1061DF1E551CEED4A80D86C2D4649
C9FF9A1F93E96773CD392478D5B70D5336A03A274E0A6EF44BE8CB2274324142
706BC2E340DC944339D647961FD7BF29944503B4AFCDC69A706AA6B0F6AB2CB5
D220A96ACC1EE5E7826F6F75F044224E5260D581AE761AD0C752A06AA03FD935
FAD65C9EDD4E5505396E331D45DE88F0D1A4303D766ABE0702C17E2A7F53C0EA
96A4DEC5A6B6186F5DBAAB05DD78E38AFE630465BEF0EC66ABA9C1C9232214A9
795D105C33CF069F6BE20B179F4CC9F484AB63ED25C1212C457DF62CA0D56E20
608572216F2D4C09010B03A8AA6D287C8F514BEEDC1C912552CC2489858BF4D3
084882CE4F4B6FB9EE27C0168671E6DA154018ABEAD013C88E1D3EC918371251
63D95BA0FE20212C20AD3F4DB614EE36B488A3F55D94C1EDFCA8E68E54A1EED4
7DD168DCCF07C3DDB5E2B499DB5635C5C5056A7438120DB4839427D07F96AB8E
F842E285243E40259F6DF029E27779CCF3D3BD7206B2C341045A5A4AABACC2A5
91C6830FE05ACDCFDE99046F16F2AC183426ACA4A89FE5F09B7EB2F811BB5FB5
AF073BDA2886070B2327D582DCBA66B47E8948C3BE05E837BE4B81402A583403
74FF9E938F0E9DC3B1CB81B93DFD4070F9EBAED40BA570DE8F9A5C2C0A097311
22A6065139A6580E332473E9410D9F4C734794F79E41D0D437CEC7381919DF6F
A24B170E2BC97A6396A4E3AC3D844AD6E2B8FCE1C6AE97DFC5319F49130C3D6F
AF2541EB2384D5D4CCBEB976846EF8C2165DBF706112BDDDEC9A57D157F5996D
95229FD5C71B885D16B177BAB06B9DF5740A45C2A005778EE879193290419C0A
A4A339029E37E685B8A05B111DDF94AC19B1D85C8E6026E57E3D3B373C08557A
F96E6FE3916695ADFC1F0BF5D558565F42A71C61ACFEFC9026424397F0646642
7EDAA05794BCCD164A645860B57EAD53CB6899B18C6E9496EA4DAB0A0C272639
DEBC4FCBA94B3BF123F7771F602E7667C8F56E12429669F2219C7D8E294BE07B
71E88EA62F5616CAAB7C0198E6FF12A348E36B306FE2684A401399431B6A84CF
B46EE4BAA0F4099E65E9AF3B70274EDD6B6524F4FA38C23F9CD5273EEDC8C6C3
E7312B6E0497C05AD3F3C246638F01387CC11DBCBD287ACF54D8E24759F51415
35ED64132EF4158F54AB9F4D567482B3057880490F805822F71E7E2C52F7BC38
8B1F803AC3731064B90E5E97AA3351D17E73DC2FE526CD6C91158636E395867D
C1150FD3BD12493FFFB813AF0D08C8ED0B7418A2CF90BD5B783364358605D075
5DEA95A9299C0654EFB28E2FE8A41358A0DD124D0314A27558E42ED5F2D74BB7
056DE04D2CF13B9B804A3CBBA29BC155A3F18B8B48283194C33CE8291677E1EF
0721138F8E0409D49BB99F217607586D2DF00C29A25536E21924B4CF6702CF85
C02DFBFD2AA4DE3DBED1D2C02E21052A8D10F96629D0D18154923638FE0C48BD
E2DEAF11663E20717EA77A5453686AAA39D6FF7919AF09B1AD956FDBF734F49E
262F3076F62E77BD45122B55A5913902D9F91C4246FC235BA9C0FA4A96994291
830638949BED423387DA2D455A3C9122484EFF27F5367D1D3DD27D207D973815
965E1CFF36F43C653ED406F65348671D9FFAF55BA3FC266D438AF473181B7801
164EA3F04FEC870743195B3F467DE36B3719BAD9BF15A18637A314C887D46673
445BA3C212749B0A33136FEE9FE2C9A13D62E7ACC96378D257FBE0EB06AD4D4E
D41976AB92AC720DFD33B0677062C32E6F5C992A0324FD26E984B5341A58C190
D20EC3F1144697D514D9157340A6C9F82E62AD8CFDEE59F6FF86C6250CE33D6B
BB82DDB4F65BEFC6F6D0E4044F7BF307CC346E2FFD191846E3CA288C6F91CB71
5FDE855FEC5E38816CC635C470BF15263A10A409F0BC4877F7E6D4C223E3564E
E7BB5B320AAA5AAF4F32528F7413BFB97C70FF5E6843E1FE501472129BC9758D
7531BE576C75840CBC4CD3E6D9E5FF52559B68DE6E7827128BB2ED1BAD43F36E
A0CB68C1A147A7093EB02062AC5492DB7EEE08B1BDB187E15339A66269E459BC
67495937B4317AF66A498923322B087ECF47B601C26E253D223A784DB2D204FD
0668BD403A73723848018B7C86B627B9AE0BD9038F567CD5F670CAFC5C4D86FC
ECA211B713ACF8C1370191161CBB6C2592E8B9DBF3471133F2D9A60F15D72F9C
5E5539D59A6A7E124D9A38A6FF6EB7C71990716F88E1888295584F17D49144B2
B01A190FD830741285B001D05FA4E85693A5DC3207DBCBD7BED7D230C72945A2
D7CBD8E7A0C607F80A4C94CACE846F19B5B15D74CB090F8360C05DBC6BAA5BAA
1CDC394C23B0F46FBA30A15F33344F44E47C17A79B98AAD61952AC0AD2D2B38A
E272F20B3F66F8B1E65BC0C4729108DE73387F7626BFAA1883534E6966E13B41
C5423FA696C351FDF01378205427E18EA6548E679B9FBEFADD706F0AEDE4E562
43E31E69A87890849BABC9452D6CF81E9033D37D986F6321A29D973D1F8C89DC
229DFB6E4185B4B808C5ED437314F75DA25FB7EAD662B6F2ABDCDA27AA8B4404
26FA172B731FF01C5A4E745F19E52A40B063ABADF9B9D0B093F31A7E547BF633
89776EFB4B78E01F029B8C3435D472F6EC82B25B153D22DCE5D8AF7B5C6AF8E6
9690734CFCDB263E8BBD6EADE7B88FD90AEE0E890CF4288449E15C22BF0585AD
5199AA8D48586E587FD22D9DBE0BB1E298678788DE65F955F7EE6DBB89760E6D
B7E6E97D825A13CAF4C06E739D956249FDCDE8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BFCF3BD739E32E7FE909AEE068D50FAC33605FFF98C7D0115FB860178FD03DB9
7985B78E0AC21F2EA065FA841F5928FB85163B2E2D8F850DC7EE313912C45C28
2783F6762C67882EFEDDC7E7567F91C16B16FD8D5A1ABF35B5586307701B91AD
54984598F2AD46FEE3D68A2731BEAA754C8E730FE0E84952EF77930E4118F8D7
2F3AD7553D790FA71F25D11EAB33FF45E1B21F7333E36B945FBF1C7796E9D08D
7E6119989A5840C7CBB8AB46892A1DBB8C726D4FC625BC7DF11D303554BA0619
A03BA787077027CD78A8D5B462AF949CEA622545F27AA85CB17A31EF4DE6220D
2ACBA3F62B13EC3FC7D3BE92C6BFECCDA58B45AAF06EBD411D33763AD88B2F4F
64AC0D26831B8BFECF1CAEB9040A2CD851E32747B67B849FE470BE165E630267
9FF51EEBB6AD8DD4B694B9C15EF4F47949304B227E72F97D2BF0D971F17328EE
5B5FD0E3324A6386FE092ADD67408F4EB05B5826C737D5DDD2424819722BD654
8366A9BECC92DF1193356A9BD6EF3C537E31B13C79D48C268E4F0F874BAFA1DA
0BC55AB5E3BD00E8D87447B4999BC72F7ECC8C1AF78C09352BB810ED
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C142709013933E3B325C8685C61
048660562D70CC0055BA8777786CCD161049903DF61A5AF6DBFB02668AC5DE57
3D52C3FA13DBD74DE4AB848DDC5DF11DA16E7AE728A1B19B8832EFAAAD7263D8
DD78BB34C58DC2439747CC82B1937B920E8500DEF5293C01896B10A6DA71A168
4F6DE6DDB7E2910A0D9226ABDCDA689F20A867450D5C57181D23CE3779136295
0FB6833E98F45B76D98F7F115A67578C90CE30A316B3A041849901838D0A12D4
7F8BCF5CC5768C0AB33CE1B23EBD4E3C802D8BEA7EEBE241E7C7DA1E4135D3DB
AB5C51E5FFC0F527C5B59A59FE5C3360A0C3CD978DEC483D4DCDDD173894CAB7
0B73187E5BB9C5480BFC02FC45F2B1240C294133F7627AEFC03823146D0735CA
D73632F8EE970DC0EBA43D2C700A1D5DFBD179A2BF9BA6CB5818D72CDD90E52D
FACB64955479363CDDBF4C141FCFE9A9A2D73D1AD3D3FB7699F4A04B5B078DBE
76729D694396683D4125C68AB8F0DEBA88B876C71B13A737A00B245A1571E9CB
B63FB2EBF35B5BA2F0E744ACCF23EAB3C9E0437A2F11AADC43B5D23573EDF779
8A4397FC6B28F7DFB72F5895A6BBE071E3442C0A00DD938476920CF67869A9DD
F5A29AA5030369D13477E95EAA9BBC038E0530B2AD398A9B03C8BC5AC4B184E1
3F3ABA4A18487B10878E9D8009F85672B756BA24DB51A2A131B516923D5CC746
A429FC5B2E565CFA592C54A42801A142883EBF015FA81AB52E34F91345BEBA6A
CB555778CC267DEA91A4C2179322E46D3E61F8C996A63AA3D616B447B0D88B53
37ADF6E4CC84EEA24F77BB33582B268EED29D4C4A28C745F663D97F370141456
A5DA72442BDC46D862F6CE1D7408EA2A22AA7C602BE0B0A43D9D5C6F50C479A8
1587361F7897A2D28A562A935226FF823955C3AEC37FCFC416D861B0E313E938
7668640FB271BA91799E6A004D436C27CC46EEF80FA1A05AB90D788643BDAD10
366C6192D003985BAB6E49DA96211DF7CA971E34661E17C5DD710E6DE3B94D85
3362CCB1538C5D0664BDB72A57757B2CBFC6F5D915C260859C43D16849F29A1E
78AE53B6B477C24A622EBE5C0DA2A9745F1B53F1FBB54E46FF405BCCB859F8A6
83E2B84CEDAED3264A1C2683C4F28A6E0B9E86433E56DB72AB068F56185A95E1
B0429A0F9DCA37CB2C9CEC2CBDBDC9CD49C47C8E31E70FF75FC4E34D15C0BBFE
D0EAFDFAE2C502881246F7254CB4F3A196D257CFF8AC01064DC59B43DF12DCA6
26F8A2147DFB161F8F98CC3027FB5FDF901190949B4B6A3297C9891193419E3A
48D571DEE01E6C1591107758A825000F27BE974490F2C2A1EDF171B5A5F7ED24
B33D2C3F965E6C31138546BB8DA583B835BD8F8D290BD895D061C711128C794F
77BD223CF144C0FDBF1576BC1C236F66A3B79E7942082A69DFA7F1756D39C28D
5D07475970D8D7A6DF940E23FDF870E2858CDBC2A3303984E8B4733D35471A43
C4AC733BB92B64091D3187C8F9855C044F5810B772FE37524027FB1807E2EBB9
5CBC2A6834B6D297D934C7F01CCFC190FF085E5DB40B26A4E0D9D68BA661840C
4858D1D3E67DEA90A16FF693AF98E2212BCB115345D433ED23F7B0B9A7414BA0
6EA5776A594A9275834F2E56C9A5C9BD35B8B288FAC8AC56D0136C16C2109C87
627A1CFEA2A6707D6B09A863A2A8F766E04C09553BFD0F222FF93038A2BC3C57
1220FBB27843BA1D65F542D596F3647FFC1E8D9BE2EDCF1873856390460A71BE
7F8CB0CF3CC477C61D0EF5E89EB39A06E8C322EDAD6BCAB99554EB604AE9B420
676B67A1327D1B24763C86AB04B92DC96A134302DA50B8A4407F3BEF35342DE8
85B0C370FB10C954E05C0B06328B105F55B6BE5E98D4BAC0C5A0DDEF52497AF1
884E8417F48DC367E753C02975BFD389D8522C13C6F6DDFB92318957AD19DBD7
3060872B34150A6740E2603C6640F01E7447B387DE7A86DCEDE5D937A1D6CFA4
7CAC6AF026F078702B4A462B902E7C0AC152C699019C8A6517B7FFC0018CC434
A190E7A542F72209B35D067B383AE1AB7624FCD55BA55016F1C8B4AD93D603C8
F4F0BA12673BBA2DB7A63C6DBB9532AC14EEC75C4E1EC9D8DF404179EBB1D4ED
D001A865D59FE365381705E9BE668D68624D8BB113F0FC3E59373AE26A994F73
BEF088B97B078B2B3922972A6E3B9E65B09F072DDA726280C441D3F73D13FE68
FB28C02B93131C92B4D0E7DC6B5BE078B5061E26B4AD3B8F587CD254AE53D2AD
726A8B53D0B03B58303A10A1BCCFFCB38C9C0A1418E3FE62344FF23C6BE43AFD
338AA22CB6315E3C029DD7A26085AB3536DE1C06053C928EEAEAEADBDF7DA728
4D7166E19CBF66F184C3FE28C017EAEBE4C2B9B26C9850BF45BEEF6DE7327D25
2C2C11DC0281CE48EA3E270F33A80C5956432D479BB28A15BF1C350A4E445988
2A3BB6A7163FB25ADCA9D8B8E8A7C51582C0747E9BE4868FD373010B5FD218A3
24B2A2B9DA1AA63F40C4CAB97E7BB05D6330383F4F17923520B10C6DACC5E7C0
B78A1600D30F981556BDF8B36D46082FA16CCCDED6F28A240D66F004ADDF8466
FB1E3D2B8E532A95EA8A99EF9D65C4FB16257791A42A9EA62381B3296C0582AF
D8AFACAFDAEBDFAD9E13C3155AF8E378E50DCCAF184F66CA29CB172AB301291F
6DEB2A01467F80FC18788E669F7BC2431913D53320A4887534E0737FE7A0D9EA
6A58857BD8CDEFDF00AC6E742F515DB1908E4B1CB3BCD58C1350DB477D171DAB
B7EFB23063737FBF7C4A3607F47B3E3736B4E4B1A4C9620683428A98C8F2A35B
E8C4385F9C21C1E606527127A7C0555673002F4C32F5C68DF121B91A248FE856
20F6CE018551A1AB79E23C88C1FC4905BE2A7FC8A405D5C34A33B028B27BF2E6
2F4AEE35628F1B73E7B8B1E87546B72C993B7603CC27FE8C5B54D44377CB411A
DD2A9C794710115EED4C1B3BCA14E97BBB8F26A7E19420271FAE78BBCD206E9E
FC07F93CFC287D54C88B2659A81C899650
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFRM1000
%!FontType1-1.0: SFRM1000 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1000, tcrm1000, larm1000, lbrm1000, lcrm1000, rxrm1000.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1000 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-189 -321 1456 937}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F267FE330B57DF626EBF73D2779A4A6B462AE6E5
19E5878939A488F2FE1094A76925CD24DAD4573AD3CF34E426708CF06E7EBFFC
BEF5595408106E2189F418D17AD510ED5B6A528E8902AA3A5F0FF52AE3DEAB07
32F06B63E28BB88229E046F4FF8A356BBDDE82DF2A197F2E26CA00D5594725A1
83A89A36487EAAE1AC312C929CDCE50722FA6C596C261E4D78D6C6ABF77F5CCE
0E410ED74287A0F201140F8D9674A7AC585D3CBC72CCB824F9E1CEBD08AEDB3A
A4015CADF471F7ABD9B0F0AF73A8274FD441BC1988A61799856E4770155341D6
516CD0E25BFA59B67AB7E0571DF3F5BA70AB52137D9E6A79EFADBE70CA05AC8D
991D0895C8FFC747FBC0E9A7212BAE6560B9E2B64FFCC58112E64A3B4CF7ECF7
595F51C34AD1342F5678FE1E62EC5A389CF04E82B5F832914B91F921F30A7E32
CA3919F57A2D9DE844CAAAC0DC751C255C9916595E8C9532E7A0A84A0AEFCACD
83EDE059FD06EEE9951473180B517F25F609F347DBA012AE9F004DC3C771777B
BE812787C3C50315D67254A384EB65F260943C6E16B2CDC64E15EEEDC67C5544
8ADE9981A6867405E46222CACCEF79F9DC8674268BBBE1EFEC2187A75FB7FBF8
CB2DB2134848DEA2F9CED443DCF561E7272B38F830871B2A5196A787924EF556
4B7E9093ADD414ACBC10147944D216D35007E738742FE10BFEA9C9A44B32958C
627546E24AE2CC98146A855899F1DE9E2C243D7F28ED966589D9CE396612AA26
9078E2173AC40F568487BDF1F53BEA5827D336164E2819B6AB69628F857FFC86
938F1742C86CEA1DBD68301B2C84B62A33C8268A6CCA6339F4AF79983D5172C8
A479CE8AB6CFE5FF69257E42AA6B4F5AF414608936BF5BA647138A1D721FA43D
1D5BC07CA7B7B4F81CECD8C39470B9A1A8866990838A8596254E9BE0AA158799
C8693B387D1A561C785568F015367A8CB272680B488ECE13872093FB64AD9FC5
5AB3C2B84306176F7AB5B17F4D73B66A519CB9D43F8166197D0F5988EA6E19FC
AF5097D67BF30E87D52A523953478E98F10A66B70E9B262C6907D2DD0926ECCA
D6D045475206CB2889ADD3236B93BA8CDF07076529679EF111D73E1B5BB4E67D
6BE2FFFA9D1EE483631466C29A9E5BDFFDC394A6DD05090D2AD76EC405B062C0
A63C847DECFCA7EB8C9544547AFBF3A84C5F9174B2FB78175773786794CB8BF8
74AAACC793769EAD5149144B93BC6265F469E3A118ED153CF2CC4B31745A01FF
A2B6EA8A841B3D5204460E0324A728A44706575506D08B278CB9D895318B86A2
52F8FCA0F5E5FAB4693453639318D5C02F31A161D538B2A2856AEF870FA38042
BF9AD232D663BE4CEC9D9A7E291447B91960D312DBBE9C97735B765865CE1F37
4905D4192E141233CD8FD1BAB44E9EFDF217856B33E3B857A5E9FAAA0FEB68CD
49F45BAD15222735399E9271263E09FC1493C960EB66639B4FDEE1046E845E5C
8F06FE63824D86E19365A6FBC83CC5B4606AE51EEFBD53D8605F508976C11406
E630C62B20570898CE57EF72C03E936F666762EC501537F65F5CAC2B89ADFF4E
0BC424BB943F10715FA959E9F319E7737B8908D28EB2D6CF6BBD036B37A19BDF
6A773E9555DA07C374F7755F3281803F22AB670A2D553D7CB133CFD21873F8CB
4A1C2D702C2275C4D3180812D91F5D81AF68052B92B362255D1C44A27ED377CB
612A8339108F0636CB02590F66F8B14C146845BAAFEFBFE4CF335AA573D2B9DB
FD935263022FE12D3D45BE71F028E601051F0857C29192867A15831F5034A3FF
831081270062B6B6B0B64029FC0122B3ADC7890F16D8A5685D58175EEE871708
6684BC2D4F757FD2D926E994E8E1EEAC4A14BE2829A55B68CFA4E2EDCAD61976
E7D3A90E401AB64F51DF590F682F24890DBCE037952AD69AF7357F95408FC983
6182135BD489B276580E5ADA5CFDE66638344880CC6F85A6E453112DF5FB249A
07431EAFE27409C5183133C083CB2E4949DC2D2D1ADE17E43F801555906372E8
7B007B8C9A43832B2899C898AED6EF6FD626F70582F9B1F79FE89BAC517ED725
DA0E460C5413CA5F809044555634A74681A192E2E22BAD052619A6D956CBC6C5
A5418D2B1578898052C66C8A8542BF1EF5EEAF0458BCFE820B44579092A4CADC
9A15C7C7B5CEDEA451F831A2E3C7177ADA26A938A4BBA8193679E2BF3B4D563A
E2972F05E6532BBBD60ACBDFD19815DFAE23F9BD712BF9B4C7439BBFF5317961
406209792058DB48728C2550984CBB85B7CC42D148596F467CEEBE50B9612F15
F7AD81CC05DFB633FAB3ED51D3219ED5D06C044E175657B51B636BE53938736C
F32569B11D4F9D68CC188F215FD9442C290FABA7E0698023614ABFCF524B6638
3E542DF30FA8B5B67AB5087594C2D78A968F1DC2D7DF41DC8E6923A275A78BF3
A39487DE3C266C47DE3DC6B596D3DC87AB035DE82B7F989092B9DD99C222A885
3E8A16000374AA4850C4BE8B6855F3BBC478D2E160D1E0999B1F85974F00EEA1
7CF4A93F7D0C3364D67A906A3AC3A81FE6BCD2700F10EE8DB2D813370C6530F3
D6DB7692A30E4610FCBF8A358496213C134457C40EBA03F8498476DF7B73A56C
35BAC7C86CEDB986D7C6AABB15EEC63300146F9D80E0B68CCCF847AAEA25176D
8072D767F4D533B7C0FA30B012030518C804CCE6999E7FA0FC83126ABEA4BD30
A32FCB555D6628A849AFADFDF0B16608E0655BE1EB67717C39078CA1621C13AD
31CF98D22DC5F1C6DA48731A202E0CAB8A069A9EB514E0D8C6FD9339FC823A7B
E04C9014E6BC506A99835C4763A6985CB387387BDD3C1968527C108A68874913
4752680446F888A9F9497A10935CE8F681DFF83E7AF220DF2E0CDE22C6BF6EC5
19ADBED96E0CEC257943EECE9B0D610D6DF54ED07F5F98352ED737297D3BF895
5BD2405D01D18D86291E295EA5F92691F48CB1CB2A234001352A5E9DB0897FE2
CA7E60B9827E6ECF6333F6AD036FE5EBD955E9CE2A2621980D223258A771984C
478BDC2F40FF95B68662AF6BF5AF356F80734CB08B7DB3B2782F30BEDA350762
BBFE38C28CDCBBAB393DCEE81AD1E41967416E1FE8C348E25A978620C471F2B1
643C8441F732A895F0F009D8B73499907813905800C9CE6A53D991623645C992
7219BCE6153436D899C6B1F9BC1210AFA4D4E445A8ABBAF0A9AE768535EC2DD3
0B989113C5A14E3C0BA25435E1E46DBAF38F0F004E55272621B9E861892DE53E
6410EB797EAED315EA5DFD9529BD90B8365EF29A386136B3D1CAD7566BB1EDE4
286AFA38074B6CA2A5977F1DEE184B2832ECD425FF9CDB79A7F221A498E04292
E793625D59CF3FFB186DBA85272883651C88C511E5E3D25D0F5C77607B6E9EB7
F23E519F13FD8B3F70D60F0D5BD978A09B3A4CA9D4D06EAAD43B64CB7E17286E
8EA060D2A0A21A598B5A151C1D3355DD39C6B1821305F5EA02AF73118E8301B3
DEF3D928C7CDF7DB422443EB3A0F7C30AE37CCC890ED18531946F5E38D81CE60
B049BFAEA15468100D83513DB6A923CC0DF573321F5A34137BE8DBE60E12E4EF
F4AF1A5358BA218A67C42AC653C1373763DA6197751E47BEA23C35C70D584E3B
ADB221F94D4E898FD2494B50704BBD2772725637D6C071EF35FFC55D5CF592A3
A04583F3C39D358073D9DD0DDF595278BF516641EF95C1A87BF80C048C5F979C
46B8785BFB6A81B147FED3A6F47397210C899E84A773A3DEF738115D3F29F665
C1F035C9E649899F6B7B8D3DA700191101F636EB9E0A4FAE75701A5C76D15B58
FC6987F1D673BE010D7C4AAE6B0BA5667801D97B2A9CADB9C6FE5306FAF19967
FEF0B00AB87330CD580EA19FC753FBC16C9449AD43A8C56C005E56720FB86F6C
FEBA39E5A8437FB5F96847EFDD6570FE4F294C7B3FAA216148BBB56367EF01CD
F16D46B849A602F488F21A80EB7E38BE239EC695CC52B7323941FF8AEC890078
16A20A67A334A8EBF31B241EB75D11AF2E820DAF82BA157587E77B0D275BC026
30C6B4D35DC70F1E95409CE987D7A3AC11D76E7D1455DCCAC9D896EB01199A4C
E18DAED68295A022F2DC296595E10415FDFDADE4CBA2880C65EE0D8F09CFCB18
0ACD68E18C8694A3A06D3EBF56A72088658E5AE6F63445CBEA8D87D5819E08A7
50B51C6E0C7368C5E7328FADF91127F95DCD1CC5F45D6E7D1FD1E804A7B2C65E
FFF5471C3023DB1AE200E2F3BF2F726C5F214187453EF0544B2885995B5A6F4E
60723036D6E6F5A9D1E2F89F77111BD97E1E345385839DFDAFCFA2183777A7EA
117568E1B0DA01B01740E760A719D1ECD81777BF14C9A9A4E3F160D2EC4C5C58
AEE2C9CCB699C756D04F7CB64AD68EAC4323C55C11BE6E3030272F0236AFCB20
2750E9B9AE8EEF1AC1693D116D5727C8492D7B6D55B4B999827BD4387FEAA0AE
A3A6093175CE9E936EF8BADF65F9DC6387646F6BA42247F3D89AE8ED007EA816
B3F8D818EA9EFC3CA050754CEFF202A5675C441769D98F92B0D54294863EC701
AD97B94503B719B66102E2307B1CDCD4D791578AC250762E982E522EBC4CAD3B
5349031BBA489B78A82148C43ADA7D49FD86F29FD198903C60869AB413CA9957
92F40CFA32D389DF0E28C3DC3C4EEA75A0980354F775CCC9E51F5780F79E2A78
5C5123FF234201F76EEF7592DEE52CBAE0EE275A371776FB79877E9A77A1671D
31BA911002DCDDA2A93D4A868A69A3A553027A9CB1C991FC43F030D9880FC661
96E14BFA2080C9E0F54ABC5BCBA3601D9EA9E9A22C0A3A74148A7B268A838EF9
61E3CDB2CBAACDB2DD3A05D5EFE70C8B1FD63B002DB69F061E7525EEF4860182
E848E6112C26822397DDA42CA372BBCD52E389508C28B94F2F0E172C8AC420BD
0DA240FDB4B19999924284FC21378F57DDCB731BD3EFAEE422E9B78A28373901
ACE1E9DFA90177800098C107BF152560CF6ECBCF0ABB9233D4CDEFC374AC0CE3
31349F6B4D4347F1E55E05DFE210D2BC89871DE39905CFE0C0D3075910540881
F0F06C642E99D0B55C3E45A65E58CFCE3032F5A97CE700567271220D5E3D23ED
5DD934233CD5EAE31ADA442C7A59557E717D12C585205D8C66FFD7FA6E43AB24
263FB3CC3FF51DC302D4A39CD8E1B1412623F397C0BEA63E78B26E677BF9804B
D0F196903E3B1612A2C533F3125D551896F2BFDAFAA6D6270B08D42741A67A4F
22C2D72A793025947BE9947CF6BAB060153BF2E8606E642C0273F1AEC1900376
67B37010E988DC9FC9F79EEE9D91071D0413F4FCAEE18AF239F158FD013D9EAD
2D88B01654F4C983FD0F0224BF4E4D11A3A4C872FD2A6DDEA95AE25D878C87A9
91E6BD4FF89E060F1B93C3C080A8CEB6AD363612001817185E95A7C25AC7250A
97B106149785930BA086CED7A5BAC8AE3A5456E364D2117D60BA66CB7B4E9FE3
08295390AED32AAC9FD853767FE8A255FB0732FF1E12AB2E583143521475AA7B
2003947F1735000152CD17FF11CD94CFFE6950059DC2EFC61EEFC10FD101B48F
A7CB65F098DDF08ECF3206DF013E0C3F20960C43B9B4FEFDC1DECE537EDFDF32
AE56338759E502EBDA16C41214FFA23EEE44C3C850DBE7119DAD053A7AF23945
030AC0A394EFD9F4AD1F872F3020C2C86966C36A1DE47BBA7AED14C409BDF503
2921E636E9F3805926EDBEA229AABA2D49D1AF14B8B004B03B694ED02CCE5FC6
093564301431AC809D44564EC8945AB17088ADAC17D94230C074F71D44213796
5FD1A2148730352AF582A0C7683D3B495A115818CBC5B448D5AA92EFE9009590
3EB8392A02E415014882FEEC8C9469380F067EBB85D9935823E4FFA7E954CC62
38ED8AA881C0D7F84454EE9B9C3C85B1F9F72E8DDA1B8D66DD0728FD0D8236E1
A0B74ECB75B6B03870275FD8383FED9887D5D797DF629C518276083BA8234889
3BB54F7B8A6BEC40934D25B213B34B198F3F725E93AB6C72936D9EBF147F32A3
503922CBD3781C13C8FFAB98EB0543015F06CA5583D5043564A7F23BE4AA34C5
45F35E0F24A38425120CAEE0B0DA4E7335D97580B62E6B5EC6008E3EC6B36D2B
28C06E98438154B60675D758B49A251841B5C0478BDEAAFFD170672B039C8F8C
BA41CBDBD6D1401B54E1EE187C0BD9B18D3F781ADAE361B3714077BEF990A893
744409E0934C51A2079B1EEE766C595ABE472E2278A1B9CBA4C6AC77CD32D953
CEBC9EA1D871190BD3CCD02535168129567810C0CF149C5C00A525425C7ACFD4
8364F8273880ED40DACA3BC49CAC38A1F864FC8B5422B194063772B499539865
A8B576A81C08B9543F30B26D7B4D25676F7FE26B66C99D7DAD53E7448D3F5836
66A97EE702F2DBF0DA3F76BAF674A02769B5233A9256B2087EC8D3C4431D831A
E23DB618FB0B9137847A2850B82676FFDC82347811F730D43E56000DE5B945FB
59F865E8C78B0395DD2557FA49DA47AB3DF5455B58774F0C9607F6AC26FBE2CD
CEBFA8DFE0988D81FD93F8189DD5285265C5FA7A6A0F57BF6F0A5BDF6F8EF05A
78F03E841887B573C1E165BA862FC500724ACF76E129D9DE5D8C5C9D01632DAE
3EC2CE003245CD099D44CE016458BC371DC0E689E50847D98B0367913F69B92E
044AD39E18B6AE531BAB7525642802833EFB16E8BAFA2A46C7652F0CB43C1822
250ECAD9B4FF755BB116253F728AB67AA3AF5D3135B4B9843187A2C3461DE288
4E34E806217F9F04D49FBF4013C5AA326C57BC170A947739916112B3B6048641
097090DDB8ACE5F24F73B4A238690DB398D83F65753311B19E456CF2AD1F7C8B
0165BB593B873A72287B0E174241E8E8545919DBB19F4590005BB8B6D57D9200
B21AA2A22941B1A3B155D9A79375A95B841A329BFAA39EB5F85BED24762AA915
F9D0DCC123B47F44979B7714EFEFEE9C9F6587E3A5B415FDD84D1053162DDD78
FD3ABF42F521ACD3E8F45B565B8377CF73E1B9EA80DF701E6064C6850F1942D4
A465B9B507729B7D3B3CC1AFCDF3D6D452B06CCC853B6E186C68782CB641271C
524A64599CAB00CD617B1DA798FFA9B26D97EDD3BEC01ACA510D7FD36A5828D0
A897F541609F4EE464B575136F7E638FA4191634027BCA5A3E256F63130E8C01
88F9951F8B9DD9416D67F68ECAB1355C50F246011FBA1B9B9CB1CEC962870267
A146ECD84F04D7DC10AD4D791FA37BAFE98231807317CD37ACD238307031AF20
6735E5C99CF62A77019A4B472B2B148B6741CBE548847AC42F99084B7EBD88C9
F5764ED65DDB5810F109ECE80375754D19D2537B2CB7F48287F12F9491513D07
930F5457D0C01F04692076E8A967F7FFE96F5FD1DA07D8B731C3F387F4E247AD
2A69E71605B0C7E599AEF82993A5799B530FE1BB6705F9661760CA5A4D28C626
76C2C378C1B0A69949A1E14670B74410912EAB41A115A40928B8BBDA5698D5B4
BAFC5601733FC2B8860CCB5F7134921969A141AFD0E21ED1C80F69170257C056
6EA3C40F179DD5285265C5FA7A6A0F57BF6F0A5BDB2716AF805FD8A8B8578253
6B1E3F3D27CE4C94591A5FAEFB7D2B84012920F318C61A0621DB4623108166A1
9E5289872538ADA1649D79D26E799F1D26CDA56B940E651D05C97932CE46A69D
77B99233479FC9E0965E780F9007C33CEEFF6139F3FCAB2B921C9AB3BB1C6B76
851C31C2E0C92CFF820CBFEA75D39EF592578BDB60BFCF0F6B4392F8D70C6AAD
54821B1F51513558A2844855CA7411F5DB245E3F656961B408EBF05438BC6414
4B61F5B691F04E526C85C657D1C6E3FFF88D1289F13C55437517194C29B9313E
EA5AD44DA34574BFDA34CD5393989770240D21FB2E3A4ED735D97A23E39A5A22
133EB18636BB7A7EB834B4689C1F70AD759640C5FC87013814FB07FC5FA3261C
FEBF43862FD3E84D4F0CB6A32BAFFFA8F7E50CD99CA007FFA25533CBA45BDEB4
9D8141816C3547D9536B11AE9DCEAD87AB0AC5F00FCEA69C105BA17191E2B5EE
03D751F0A495337B99EFFACB02A1279235EB9608935FE0779C69867110DF00AB
03E8C8B32205E51C059ABFA4C4DEC72E4BCE37A9EFC2A125975270F99633EC81
65B723BB0517BF631384DDA67E813B80D0F61F2AC46E98508DDDFCB02205C501
F5C6ABEDC02D4EE27552546BC4F6A30999E211834D7C78D4B260AA07B1D1AC55
F7996A399A791B766165201CF8E33869114D6A673286816C7E2AA1707D3760F0
3947D047496448AE11B5EFB08AB6DE487ABFA86CB674701601D12DE839C7B0F3
377F3E071A8763E8664E847B6504E63D8248044CCDD7DAAA8D47386DA57E1434
85B9B9550AEDBBBCBA27F9D3D78198F1708DD1028D878975828775F72CF81987
F822142B43395988BE57A713F019BB943FE92F0B2263784209A719CDA49769F2
7E5259475225F02A0A9AB72A8406C71222D3389B9019F742AEA9991524D28621
2929B0428A412E4E99BEB2C94DA6AB8C7F4876EB9B3494FC43369DF0178B7D03
53AF45A7914D5196A52CED2AEB43153255D7C34501A4456E558CCA7810B822AF
7359BA3562E22C0FB3DF3025B97D1EF8B99C72AA2B42D4D0F76B72BFB43C4D15
5018B80D912DEE3311E3E41CBF1AF913FF640BDC07B51693B3E6747DBC5D8FD1
93278A31E10231DE0755EBA8600454024D8F1607B94DB5B3BC8322A8361E25CB
DD75B3A2E838995C0144606F6C6DEE38FD64F0032CA1FDEFF466F9407E451203
CA3E4212079FB032583EDB4B1F08B828448C37F4A4453F7641A814BE6CB518B5
9E217CE5F72FF6A8ADFB31702FEA59B669193D82EFDD9146B43ABA72845AC278
D513D4FD901529147F19D1229B02454DDD91B4F4FDDE9913BBF4ECFA749A5ACC
965ABE961C05F527AB6AA16C6388F55A65CCD62642056654D56C22EE022AD2B6
E556FC9E32012D075C92AE49124463F18604374BC69D9E2D26BEE615B6E462AB
C6A2126CE9E83ED014545030A41C72B885C33E728348F93F47F793B6BC3D4252
EA43EB1B4958CE1063DA4CF2D5568EB7FEEF25EF8DA3E246D0425D3B96F8EC4E
001D21E9FCBB4DC3FFDC1A078772E1250A760F12A5912E8E81B82387FADA4738
AE1E65199592192BCEEFD113CC1A4F8BA05BFF8F1E96E9D53AB0BB52375AB676
EA69F5BD8C0CBE871B89692377235357BFA2BDD7C3FA9B3F8FAC34BCE1743497
3DFF998629C66E912C4F31D9BEFFDD2806081D3006CF30B1D56F9B2DB409F27A
049EEC86A50DEF8FE867C0499DD02633DE6BF6A7C81748D3624326A37914564F
F1C1753F87D70E8DC848E575565EAB194767E00C463AEBE2BA17C0CBCA4C9BE6
1140BD5041251370A37D0F0771F7CAC49C2794CBDF4851F217D01146BB0E4E4E
36952448DD1926CF3E4C6725EEDCC0D35991E2FEC3DC70352A2BA5099C8A04DF
CD39A5CB6150F704609B5A3D6D2918ECDB471260B501406238ECDB963E3E020F
349F439FB1C71A1853CEAF6C4CB08B7DB3B82313B5FDF9AD1B0D3F4665D7050D
44AF0043F40AC44F23F6C029FEC97977D59571ED6A9C2B92E64BB6D416C401DA
92FB22F192D30B3503345F1E02B6C01C4B4FBEBBAD19A5F9F685DA530AADEBF0
E2D9E1823431E43B9F151E9E7FC4AA236A54765B98564787AE6F39D7012BDDD6
C9B9A12501E914D9DADF80E4B0D4B28BAFA58BE22236E5C8B8A9DDBD161AC8EA
28A8F3EF0E23C5846B0C9C8DB9953F819BF48B078E6DEC115A4BC6257DD6344D
57DA7E536D754B2D59FE95759F01F7E5591CCD5C67E18F5D39D0AE0CBDD9C92C
EC28AE23729DB974064B89451D2E3B991D5A8453ADF7C79E086D641A0D228923
1F0CA201D4417194A903EF07C89BB0BC85A6017C41DC90228CFDCE29425112DB
3E57EA2DF378386E185F774CA98EA819BCA3C705983AE25A72DD6F7AB6A17A98
A3C79C1B288B5840C7787AF587343AB6A95CB3FC8655FFA080FB0559F7F94A74
4C651CCC992853912F5FB63901369DE7A3DF57052B1E276657BC10237BD4CDCB
C94847739633FB43EC903AAAADA7E8B59C3BBD5113E2A47204AE358E7DDFC645
A619BC423F7577E7B01BBCFBAA6376CE46C86F872ACFCF79F922B765F110B015
A5AE3E482FC5A3EA3655EAEBA48A4EE9ABA87CCE6F8424DD8BB7232D8888E8E1
29BE5450144FEFD1A9BB91DE1531CC1EB5D43A69A5AF81C94DACA235621C628B
ED469270B6AFA1B0305CE8907EFC7461318CD53D42D84AD60DA7880053585C8E
5C856360F9F76AE0EF999030707FD9E2D03A7785D88E3C15A6778D660523C145
EBA04B00038E48F13EA51265918F72E32E01D40022B4AB9FA97B2892DA03EF82
51B1BE7AE04C0CA35BF1966EE24349248DBD3A97ECEB0B630D6D0D4B261AC39A
38778C937980087C6032711FE95205333FC037BADCCF8CB457C3AC8938326536
BFEC998452E49EC8F17F0895E0DC84A646B094F3FE802F09F5D42D7735050345
609C95B9977E2A7B3B8ED36221E23FB3B27E2129D0585D0C1BBB5489D56258D6
309343637F46DA3143C7A8107B983B1A5EDFB1476738B35E68478FA6D07EBB2F
326B4DD560E763401FACBE13AE2BF981212D16D541863130B0124ED97C481BBB
3737702FEF6AF7C675F7F38A6D94C4AF1EA5E76D9E734384E34C237704EAABB3
3B9273BF31D4372EE9DBD9202180DE5E09DFEA525612A2AB3D9A378672E61838
0CBA15DA6B0A02B8E25C29B36629E3AEC6ED83210A3E1468636CABA978D7BF80
868D0901C0F1B6FFC0B0E11BE341F3B8ED4D3884864CAF654CB8B00EC09E0B2C
713BA3B613002287CC0E93122F84F84E7C60978DC0D8B6047621EA10BD23D608
0B1F514A65600DBB29116D924572E95AB51E299D8D269904F072B85E8CE69927
9C8A505877FAF72F3392BBDB3D0E9DB73B7EF5B14E4B56E13C67417FDD3131DE
3200847CC1B654146AFBC5585C31DA38C2DF0B44B96396F92CAB0A4930567A87
7BDE5A4073AC1081A0BB6D274EC67FA6ECA4E151B78DA019EC901F8CB882D137
80ADA6AB918B09AD811011C695D95688A154C082AECEC9D9F83063639C1971FB
232FCBE3C238446A6A6DDFC74BC8516062FE9472309A64E7CDAA698E50BA4B0A
06BDC95F0615C3DE9F8295B34004BD1308554958D0D12B53EB5366A02FE509C3
06CD759B2F6F443D3AEF9BAF9C5DB0409FDEF3EDA3FBC4EB639B4E2FFCD6E211
4202B2CC0E61131FD16E42CC8BA0B5C87DEDF27CFD603C275A1F76EA8DDC10AD
9A3D6C4DD4BB3ADF55F4C8A7A6DD2B50FD54ED78EBCFF39185898AE491E40847
0BA8A0AD8FB6CDE3815F5E4EEA8D240CAD5D72311B35B564F30AA1F268AC3840
8965D998B1C8BA5EDA7E6005147AFDEB6E6E5AE25487EF37BDEF71F3CBC48EF1
AC9ED5D4BC8BD82DF3DACE44B0B82B6DDD4DCFEEAACEABE9AD26CA686BB81386
5BF01358273EA3AC91506346076655F1B8285F5EEA12E1147F7EB2755A6B2434
BCE500F78A231587FAA2F0D52659D6A2198E880C62C142E76A1DA62187EA6939
909D5294C7FE2C9833D5D0C006DB0E58D8C92B991576CFE6510B13B098D71F61
27A9A619BA9B21263CDDC0AB49BD6BDFC7375FFBB0688F26970E7AE4BDE9E858
21EC8EF045413A2158C80CA6E777CCDA2C7C01C46CB01B27EB37258FB0F64592
C48D50E129C119F0F209D795362FB642EBECE7A1C55EFF74E421112F1850C13E
DFFEE6B76074B810471A420552CB9A7A8E6EE0DB0917B128235D9002121E2406
0E5315F6168F9E49C25206355E5372B10515B518D59BED4B9872EF349BAAAD91
88ED4253089649CA3861A14FAC81116D57ABFC58E1EBB9EA9AD8B42133DAB2E7
90791BA3C9D7497ADCB7522CA4505DA876AEAE25B1A33F642F5DE041B5857255
7BE9E9CAB7F5A3959D5419D89261C68618B1722142F4ACB60E9D83177C44287D
9C9704B587C80020D78D95467A2291247F8202558A3DC983F37B048165D4E95E
A004C47AC9DCABFE4A1D0F22606773B9BA4833C379368A13C6477E31978CEB2E
24EC8C0AE4AC5EB5CECE43B5FFC71B9654C0CD086B7360ADE83A17787E9506E4
C6E6FE9D607B1BB6D5846434F37294723C825B0D61402FA246A71AA8E3D186FA
40713C2AE046AE55BA53D80A84FD53977F5509AA26E81238868EF30515A1C891
9DA7FED3A6081AB500469A08842911DB483CCDCA00A2A2B20C480F0297ACF70A
6BF2D9E04BD1D24FF2EB941666E40E362216216C889A4104BC29A6F0902FE088
3DBEB8A006DC414A2581E7FEE41D85F5B3C3C5AD8B0E77A37D5DF43C0A3B08AB
0A2C8E08FD2B3A23BD8323835A8CC83E76967445B1F5730DE62C038758A54F6D
963FECC2A75A5BE456F4FDA49C60658B6715B0D99569A25169F92404F6B14AEA
5998F639A916296A251FB14FF2F91B779BD1539F10F264CC25899EB6CC03D46C
C43BAF4CB6B3988467C5ABCF0382B8E87C008199330D3A36BB872A5581355CD8
6B96483BE8C5F9C53746F6B6AF22D6CB619DD55BCF7989D161B9C12A49D3777D
170AAA239BF3578A50C2841B63B9AF7C7859A6D731635164329DF604500286CB
D04E0DB4C05C4BC6894E42EC4212DA76F4443C2D1A2560C0CFFA79C3B159501C
667B840015521DFEE62F494DAAEE5617E4A9DEE1596B6950AE8E1DED89EF3546
972E72C8E3AF50C97D957DB835BD2038A00E89C93A77CE4327A978AD9AFC94FF
9CC4E361C6CA12E15EBE1A3E5396D80FC968534541D3F9DCD4F2B34AC7DBDBA3
9AF95A771A771F4ADB605753E6E86E3F592F7FABA62AC40FF4D91715C8138236
2DBDC2E2D002AEAE15F1A0178F0D7B69C37252FFF189D15AC9DC6B3D555BD092
7ACE968FE870DF2718EB946ACEB29648B5E9C29EBF2FE1944E5F5C0C04F1F6B3
E4DFCD622E0589141F416D8DDCACACBC28908369618F340A5CD74E2F22F226DB
96E0BCA378CE98AF6D7277A7AA1492F8CEAB855B146996888736A0857451F27E
42F0089A860673EE562A6242237E345373581B99347B616336BE0CF0BBCF6FA1
8F40233D9C8C1F4832D5ED27EAE7F5420350949410070BA553057CBD99EC26EA
7AD72E004CDE6B5801E612BA30ACA2A17EF0B95DDABA1389C66C9E70B763412A
179F2C57B874E285A9A094B4B468AEFF6C4138353593CDB0B0380C7F7B16A1E2
B728C525C718D8B3D6A7D025C10F90D08039FC0FF463803C200B906EB8432786
98ED4F3D786CDD812C81A921E80FC5B22FBBEBAB67F6316E177A32CF6FF35EC2
20F1C91B6E3CB61D2EB31B839B4A3B3ED5CF5C902FE2B9DFC088D1A23B43A6A9
BB8F1B404F23A5300201B1597DC7BFC110CD9F9FF8AF939CEE9907FB357E9A3F
FEB42E647D38B9C86ABC71105763A106D833A0DC33B8C28D5763F9573780B115
2342E0E0B9EDCCD686AE20F2FEA6E468E201D43AAA5D77CF3823B7D5C3B26730
2A42565AF4D90B6205448A26FC06221FFE188FF5E96713582B765FFD80E524F4
A9E84BFB8FC77B3B737AF82D06D296A75A475E9B9050C3F85427A43CDCE21F4E
728CA1E59C5C8F15D73687B18C9CA5E6DCBAF802610FC9DF5C627D0891F79FEC
D9141015A05FB5B4C6967B439ACB35A4D4CCF9AF31C40917F0F383710E923208
BAB6152048456E96A7A0CC11E93845836EDC4C9A458740983BC01CB268865E01
6E716EB84560CD8EB66FFCADC288BD5F8FCC36C487AEAB252BC842CFD583FE52
E02A9C16971BF2778ED2A65D08B4D868082B096FD955ED59D7F5DF94D5538A02
038B62D5830A78B05BA98C6179D34A43457C4FA7F067FE33C46B75C791264816
9F4707752106CD931D009EE6ADD0A21676275420BCEF50B13D864B63522E8BF5
E346A9BD59A1BFC27E0833F3F5A2B1F73547AC35939470C541E0FD3AC7531735
8638FA695459157E29FC3C0B56D8BF21E38382DF9EC1BA96D06D31B5611C4304
CC684020A6F0605099B6E39E62EC5AB0F36EEC7CC292480B1E73CB29CF78244B
7B653A6A8C6EA8EF942E6971C552BE7AB9078B1F8EF739CF787DA498A6919A14
88CF7DC57290ABD0CEFD762F1F1EA8EF8C0FB3A62AE9D51207620AC318478913
8B1016007ABC216A51B306C06599C41895E05E654E1B99B32E85427CBB4BA9C5
7D9252DE3AAA496515B26DADA60D3B5D083610D7EAAAD8612CDF0238FB3E6C6E
0750EA4C8DEC187E96A1A7F799858561E0D84340F0D6CE61C4096F07213F7056
FB90561D1B85C2C724B34DA00EABA2FB4822C9C7DED77AFA5E9C570623B8F4AB
664FE8BF106D1D1A8FF980318FB494C53A60022D4828AE68C428712998F5D7AE
0343F5582DEE579AA704E34E756F407E5898BB4C5AB8B626BCF4A7BB6227A35F
A4C5C8FE520CC23957BAE3BB3DA30549FA8D124E8DB3AE39140A430DF24833CA
21361B437248B3D911D4B949251BCBE37568635D40C8CC6887439CAE690B79BB
6DA5C6617FED4719E247DEC9725DE12D94E6127C4D78E98E25F150111290F8E2
F7A5B81E1BC97259902BC8DD41FA38CC477EF59B0F97B60DD98EC6B5B5CB5DE6
0A12647CF52E2EC17CB3756E470E10C7A0E7DA04240058E92A1716AF7693D867
76FDE6C17AAC4ADFA30515E702978FBF8E8FF7E9D214D8B5DB05FDDA9933F45E
6F6BA8E59C0F76D1389AA6F138BF845389D7297645B35BA8F6037668DBD18C09
B53A43EA99E30031CE811D1A39147346A9C5DD0C2C72A60139F46A1611C489CD
91CD5F094C2189D742E4270B46F1117CC377F7567FF2F0617BD1326E1ED51CC7
A3119C9ED0E6F128F048B4EE5645271FFFC2B2436445632E5BF03F2C3B5E9997
1C87E83DAA0C67774FBB87EA0568C5874894CCF8DA712B0098895AFF1E6119A8
73C723E5B32093321000B49A930DF0C6404B391544C05CE144E279D71864EA57
A22D87DC26B91B5731F13FABF674CC614C716CE10F08406C4F323B1C543C8A97
5156FEB1354F299B10460237F59A213AD15C2B1909DA2F43ACD5B86F4843C29E
EE83020C5C5C88FB3BE65022E5A99780C6775BF511C4BE49C5CE0CE0F10CF1A1
BCCD4CC7728B079204E84377354B4A01E6AD0C1C15F2EE20936C50140CD59DEA
160B84A57E917AFA699DDE3E7CD6F2755E37128FF1163D2DB73376FD384FB46D
5E335C6BDD67ACD27900208CE18E75218F02AC4486E6DD38949D9A19E3E7F4B8
89BB43E9C93B47202268A61DE2A03305F435E65AC7DC9BE3D4C177BE926475EC
FF4C24A2E1CA0E45C6D6F72F47FD2C5572C4707C8662E9D24F5767126B85B4A1
5ADC61CC9A1796BCE1673B7DC7E835628C15CE9DEAF9D47B7342D81021B8A87C
C78F51945BF35B2BDA4E0D2C674BDE2FC34A837C1CA1376EF29AD7E97638B6E1
599792054EAB548A4E5168B4B93F91502B49CC8824D0A52C562E24A7AFE6B41E
107006499B2805EAE1461267F052EFBA9BAD116C6C43092C71831710113A8387
0E0E5C0E29F8D456EFF15C6FA95C5B78862F99C1A000C73E9AB70C30D81A4F3D
0642ECB8265B31838DF799B4720D5125B563671012B6D7CEBC56E1284AC2BAAB
04A212E8EAB272D09560B58F402697DF06258687AFA88A98E52BA63E63431A32
5CD5A6D40A5AC71483A98D09393638C12161ADE269B0FF06BD57D44796687DE2
CB5A0B2D06D2A5AE32DBC5BE98AD0836F1A5BD05D4DC7963DEC0567540080368
4CB3A0B3C7C0F76E021CABBECC1CBA8EDFFD9FED65C276405C5C52173B38DBDB
F5D1A7BFEBE9B925FA98E9C65D8CCA78101F2CA7E1AD8E97F24FFDE3EAC30EB1
1EE2C970688AEDF74D36F206AEB9D5AD3871BBC0AB6F522481678C02F38AA32B
F2E6FB54DD4D8CF7DE729FFAA2FA17FDA86D38362CDD8A0B88B4706467A6178C
101B2F52F658A4FB87F685825083992E280A6944987808CC1D98BF8F5A3B837E
836F4EC3A2FC6D9EF0B860C2797EA50CFC96FF250A38C6CE4E576B13D6C898A7
15982D08EEE78ECFEA7F0648B26ACED76CF0D78ADA09EF57F85388DC6F25BF95
FC580719F04F0DC8112B6571085179434D57B4F616694A035D75130E5C09E75C
20EBAA7F6334CEF74EE759F3848F9082FEC8B3C07CC276987CF34E9ED1962157
060A1228456A33F0498B3022AE8666835F66C2F19D20B94BDE87307E8837F060
3A61C9A6693562556CF9F55F243524D2B09AB49BB3EF59EBA8D36241EE03512C
2FAFC80BED47A07FD6A882395650C867E91DF6366AEF35B826CC5BB1A679C063
FBCED19879560017419D35105430E9C25851484DCAC44D75CD24C2304AAFBC2E
49E1D9792F3335581A6AC12B7D1A0509DEC83E412D3F03F385383E1DC93E4A06
B5181B98F659C613F8DAF6861DCD2D12439FAB1FA65E81E6786DC508FD7C9967
A05DB68A161377F53FA0B124242111C2E74154E3D4B60AD2A50299F2D270E860
C2865B9153C4AED43CDC0CF4BE770EE48DEEED810B3B4E7E88E4A427AEEA14A3
6ECF38FF733D21311C536D65B1A80E3742D0D6BDE4B48A0097770A1E4E56E7C6
BB1635D8DE1156104FBCF95D27FFFFD561630AB415E63D5F8F3E48D673F3ADB4
2CECCDFDD262C1AA3D2346241A4F77E1E8EDC57805B15AB419E48C83BC0C90EB
BA6AA06947C2B22253D32515B47565FEA80E1F37514AD3DB5D7C9B5D5C2C8487
BA653B4A81AD4ABC94FC3038EC2F358FACA84190F3469AED44B4B458A44631C7
DC0BD4E9152B9259E2CA7F2046C9C476F0975D30089E3A955DE39D236C1B4CCA
D896EB01B4D0B79B7780C06D107490F623BA69C5AE9D297629C3115E243F4909
1789C795762E0A6186ECB16C840E3B993E19866489A20ED3DE8B387B3CAD1905
D8C26054285A236FBBB5C8C6EDA542638102507D1DEEE045A55FF81D38599479
03202FDCA38FA074B4E6B3628FA97D1769F6E91BA34025D7EB6A9940DEFDA046
560199336F93CBC39D7C683AD6BA15C04688FACFF4E4EC7602C6194921EE5553
499DC9CD315391DE996883C9736BBA86C8DCA989A63FEF789615882D7DA3EB3C
D1C25D9C5A44A89146F688057C417D98164935B9522AF907446D0E8DAFC39E05
ADB6AD30EC0A0B3F9179A99C2E57487C8050D5D6E4C30EF04FF8D02C3ACB9048
13A264A794726F0E8FFDA4BE8DC2DDDECD839AD5C77632D0AED6FDAFCF3A0825
BCD5AA4D99FE9FBB9B92B33DAA62E25102A8E8B2069C4D334DD9C7FA2DFD1DB1
B79E9CA1AE24D2FFDF67BA5CAB172850B727A2E208D03127A24CC2F3CECAC126
A6E73D79D41DDE81A4C591E35784007317BE020E7B496F49EEFA5EB7AC626391
2AA47E20FF50BC40FBCEF3E6EA5BC83A05959887ACEA9CDB69A1F21D7AA66B71
7BDB75AD5B0653280580E3FEB1520FA6CF2C2419C5CD8F22A2697725AA44F6FF
692FE183DED838CEAB89FFF62E3824222EAC8979BD65600676B89402562E0C41
0DAC7D6B9B16192EF1A28D917FB5BAB763D4A22C9427A33E7520965C1B8075CA
C199F7552BC6F1C302CDA0DC8D5745C8B040DBA372D06AF2C24AD3FCB728F1E7
768D2321E6ADB6DF121CEEE1AB627E69AAEEF3C4985299D1D065E233C1FFE9A3
31416A0523D966C94C195FA012B6F9A610F45DB79EE8F5D5ECFC761482BB350D
931C00CBDB6BCF6DFCBC86A68EF5DB586E2988C37F05D8D5B150DA991EF3E27E
4AB5E1E9B0BC77E94925C64A638772719E7065A04AA344C7E04D7DF91AA2FF9D
5756A8777CC51021263A46FD8C35059692A36BB68F26267B1CDD5E490598EFAD
83DBFDDCB499ADF48A804EE1966656D99BEF4272467A71923D16B6B4A0CD1892
30B5C0945B8C452AA07A2120191B20DECDEA6450A23B83DAAD4AE666EE0CB21A
4464EF95648622BDBEEC8BD5BA922897CC979AEF0FE1DD544F26B578BBF1CAD0
30002EAE96E41C943BAB7DBD061338380AFADFF725D3FFBD3E0F35EF96920077
A423370E914CCC49E2A0333E568CB250949EC87502C2AA3398D7EF505D15BA47
DC8EE8EE6518F5A5CBA3212335968D67EC5AF75F90B05FDE1EACB7779FADC382
B2D83888767E8D2A263E37157264258802774B40998E460AD0978D8F95416385
66D8C9B314EEF3C78479CA23DA597EF968995B71E8D2B20150CE687B6AA95450
3377ED5A9DCF76DCDF7F4AAF3144A19916B32D720316434CA4596299E94BA8D2
DAFFE06CF17C8B047C001AE6E81D339A7A234354CF9EF87E129BD2A3730754B4
644C90D559685F3A53993951941176278D2C25276B2C7844DDCEFFE566A507CB
56407DF43C233AF0E6E3567D63AB47FB58F1D1EBCE0E1FA4D4FAF65A1F55EB0D
1537F74FF5F3F76CE960CF1AFC3909FE99DEF30D8A65FD8D6D9F220FC653F890
59F02AA0CF101149A5BDF0E2C0BBB6B65F9C521016BD62C050D1614E4AACA4E7
3A5AF53556374D2B37188A5892F14648ED3116CB54FDACDE2E411BF6ECA103B7
7040895FBD02BAF1631D6C0A5AC6EDD8D531F364E0F5B97F1042ADE591287485
A792EFE1B66537E2474DEE78C446A5C02338A8329ABF507BE4B014E746810D44
89C79A09A2393E7FA2BD9F88C32AD01E4A539F681F7ED16A9AFABF022D79B1BF
B4D4836BB2F0C33A3E22C7F335D84D36E26E4387AA04FDDF9CF8E7933EDE2964
1020ACD70216DBD12BE69C4B0BD6B91E60CACDB8563487459710BF4FC75994BF
A8BBE258FA11622B429F015B29224DDDED42B81921238715105184DF962E1ED4
DD40E1EB8E5C5A8A9DF4A454DF75918A40A5881A2706E3B33CA526D64BA104A6
42C63EFD69DFF65E8B97D3E0E8B46B217AF6FE18E76F85955437F2876546F014
6E89431278CDD4B8520BCD37830E4B0BD79F709D14B18BC7462CA739B04505B8
CE87338C3209E14B08CA275ED18359997EED9101257F853475AB5F0BE5C3AB96
DE2E52FF7D975843867800B86C47CE466E293A6C32A4ACA95DC688E290A2C37B
8BF58FFE66BECE47BE63762E175B45F9F92EEDB338538490CBBE0A7FEA7267A4
FF2014C501B513BFD0D7873870568FF153754AABDE40C6D199D529BA9FD3EF35
F9B7A71319BD467CB119FFB20EBEA667EED45A73C0CB9DA51D56E1812957DCE9
C1AC107639D85180D670AD74810E5784B93A86978F35FBA7580E65BD2B254D70
FE15196F4FA746BC963F9382BF85CF3E4DC6F4ABA86A8AF77E1FC9B8347AD628
D5928D3F2DCEFEEB7D4E40D9E3981C6ED8BE00DBBC5000AF19F8E0307ED888F8
CA595D4D12CB81216A28CCE970BE99ADFDF312E0157A1E0B36DB57BFD5286231
5BF63E411069FAE8F4D41B91251990EC94D4669E4FD07016120941D131390B05
2525AB70A57EA382918BC85909CB7A86F77BE6B7AA1A17CC7F09B7F67B44F7EA
862DE919BAE5CFFAD3A39E8DC01E11649DF4DBFCCEB53029D13CFBFB83240AB5
CF5360EC0CC41E099E65DC7B5ADA410FD80E351591952B12C6E1AAC5E8C1A14E
2BBBC5AE9D3B37EEE01AD04D5C589514E555A13AE84844DB718A974F06C1116E
C0BE0033ABDDA400D11EF0DD085A825957A80C4C1BC638365C10252B45C27990
5DB68CC2F1E2968EACB2FD10E88C744544D98B02D9F3EA8E2EEA72B1ACCB61FA
6131CCE38A94BC2F5005F439F1E6823540A201E7B965736FF9BF2C6C1BB50A00
8ADA1D665DB2796B2E726B4CC03B5CBEF2AFA891CA5DE111D6AB2EFD67894B70
05EFB3D84E21AC7159D0618A80B3C5C5D192AAD8E2280042CA9168540A0794E2
481562DB59A7B620317E24D008A59F69AF2AFAD5C94EA7F9883A82191566ABFA
FEE4FAFF56CC553F9E59ADB7136820D3BA91E1AD23F4EED39A8165DFCF7AD0A8
19CA1331E6FB2518A82A1BC1CF654250C90A9189B3DDE1699B168F05FC910DFB
A96A58739A875CD390EFAB3F9A68CA92C1C3B2A3462653FFB224CA94B472FF87
A5076858DEE36B429F30FD8A41FCBA5A39A100E06C07914ACD6C33EDFD3130B7
EBB0FD48D927D4C8045A0FE4BE609E124412AD64F9EE9220A2CC402004604AA2
5ECCF931A13CC19FCB7B7735F1F6ED61D780520AB4BA6CF84FAA2874C3FC7877
11F5F125BD52832E3BA1FFAA438316077A689169E92F67F17E369980A84E4B6B
99631DD4EFB9C493480C218F82C2352040ACB8BC44BD3FE360DE3B2721A3425B
2207F7B8CF5F64DC5492CE59B950C4F0663A9F17EFDDD7B1742B647682D0F4AE
C9DE249145C18A9254F3D3564DB87D0E9077B4FF93DCAA31C7596D0E0D7E45D2
8DE11E9CB239E973C521BD7A104CF051D8C872C5215DCD8AF49F1B40F22BC193
F701CD4E196D8FAB368A433B766E755CF7238BF16EB85F487C4FA92DF839E512
02FD6A582BB0F12235F85257146ACBFF71F0B830D80E7EDF6E6A9732A0EA86DB
25D57636F3ACEFCB713C500B901873D39DAA1135E1F12DC55046E87AC25F807A
14C8FC137391EA80399B5A4549DD7919FFDCDF2B2CA86167F7529C63B31063AB
C827BA09942BD35C668A8676B127B47AC98AB4847C18A608F6D1648561EFADA6
A218AA57B165FB9328AFBE3C9513363CCEBCF072C4611C951C8A19DFCE4E3993
DC63003FB974930E774C36D486E6B4D7B5900A6A79327341BCC070C1DE3EB2F9
153A2804BBD65867E4DAACBDB81A06A71806FA7C0E553F00F4F59DD525175207
99711A72B3A94EF4AE5462397F385A83157D9FCFA50B4AB6D89D424243464EB0
0781F523ED548777D99A4B9D15065130A31F13DA5AEAF0E902F772F0AEBBC961
E23DED8E65092A9D13DAC70AB4702F5B7196B09869CAAEDA465D22292474BB11
E40E883120CD29ACE209E8B9BF90523FC55E334B8CEE71DD5AA8FE298EFD65C8
DEC5C7E0DF420FA7F920B33ADCE95E307071EF8301FCBC84121B3616D4FC7D7E
AC881018D3617732970B54EBC64554F07ED5BFB667FA0CD63A74809144AD2A73
BBB680D62FE5CD96BFF86CB2B12CB97E43F987195E563A1110F47EE8EA524FC8
8EB1ABF6AF2EF12BBB92ED446C7B4B777925977F74DBB613EEED7913B7A91F49
C6E1FF016C019113A13020FB94A650BD8055A8729093E23FA56E9E9B5775CBF9
24C85C93CC15C4C0C92F04E9498AD01C172E3C43D0292BF3F859D8E58641E2C2
FC91C33D4AB6D49C7B0A2C2ACBFA8F8837FCF5858CB3C4CEF275805FF0339CA3
93F0E414E367DD8A46D5C20A22DE54A5F370EEABE1ED45ED4FD86C16B878E7FB
DCF045842AA7B326CCAD7E143B93B325035EEBB8D3F9D971A0B9F8991A726AA1
1E0F34BDA4DCC64F9876B66497654746F99D7C6F7026BFC7DA1812AADCD83DD0
FE8726E464138DE48F66566CBBD657B4A4D91110885174A62417DD998BC02413
E911E88756859E103305863E01C04793A4EB1BE9C1D95BF060D4DDEE45A84B52
1951E57CA0F1B56198B26420188D9FB8293A6F3E2A4646D338ECFB1314E7DBAF
C79911D4E248EE7AA68307D57D7B475CD45DB4DFC77F36FBAF007C235BB6A526
624242E3BA42AA1BA471E42108DCF05919C5177A42B173479D4E8B075C2651A5
46E53247529DBC8C074B063122245D53B671F7BBAECB07C5FB48E6BB7F326554
5EA4D31737BAB100C2EC7344F4E46C81F625F7BCA5D0413F6059928069731400
17F60D48BC7B301A62E7BED72BFE20175C1CE24C25E1DBA56049F57B34F98A96
16E1EFE42471B9622107076CB45DBE9B52ECD63DAE90BEB9C84CE71D077F817E
D028EB3600984AFB58B09E295D2BFE2B4DCED0C7143B14D1BD8A34AF91CA0F3C
3DA85BCC375145288B6A4A9A5A1126C2DEFA7B9F73D412E71A60F70877A31353
002E77E5B5A85598C58B6F8C6CF244345B3E3F515DC6F01DE3D8E16A9FE8E50C
A805D0379007FFF47B2812A735EF693A72C854A94693EF3B02E544845F2C9E7D
6B23BE420A1E5F00F3750369291BFE2CB3207A3A1DA907775708C951A07C48DC
37A5A0DCB35FD946AE0236C562379929AE7E0358185655040F935FB52F99ED46
3ADBE90917408266ACD5FA35499302F155F7F77CB76849B313A5B2159C6A4304
CEA487623F5317A2057810777DE82FA800CDADF2D1EE81BCBDA7AD9211335499
BF6A6B00C96036DB430F23C92A0AEFADB26141AA6BA32A6904E14F1691E1BC67
CB5A48704D34A9C6E88DF0B639ABD76ED83A9AB44096F52E2F1B906C58B0164E
026F89BF48B717C156444AB68A476D9479CAEF73C4B23AD3E02DCEFE1433E52A
C8F0AFD34CB834974F1EB2A5ED7C0367863B0EB4E2A93E69F708AFAA04C7408F
878AC942FC04D22E8EC88E52CACC29C3ABA0D9735C61F3BB07B2897068C9F8F5
59F3B7CC0297360B15E492720400CDA603C98633F1CE06CC01D491E448D497C5
6A5684FA9C88AC66D39831D7694A9B383CF00943D58666AFAAF76EBDA2962935
E204875E73688CF123DAB4D896631D9652FC0F5FEA44DA6AE714C4EBBDCB69E0
51EDAFC2AAB630C8D94FE2FF121E4F4077B55787495DECCD427EFCCFE7689F78
FB6377B0DBBAFBB2962E13F5FC1D40518C16CB5F988339FCBFA88B610B6B89C5
5EECFBE4696860FE4C15851E253E5854E09C6C5D75C847425F44383CA4BE63A3
C56BE806E620ACBFE175A4D96FC8B51822DFA1B6B538EFD38ED1515FC6BB2C1E
BC06E451451CB46345F65EDC4C6022694566DED1C71FD0D5B251D81E5A905EA7
5A7A55468451104C75F115A472999A611EFAA9FC4E364241533E7A3A2B2F0DD3
49431A301A166818A6BEE5144F6EEC3A6FF69248752C0AA332B33B1393D1DEDC
BFA02732349AEE0BCA77BF65F1108D04CB79B7CFEACCEDBCD13171DB61FE4C6E
11DDBE502D5E89691719EA81AD84E2802456A43F910A5D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39321600 19660800 1000 600 600 (lab.dvi)
@start /Fa 138[44 1[44 44 2[44 9[44 44 44 51[44 4[44
42[{ T1Encoding ReEncodeFont }9 83.022 /SFTT1000 rf /Fb
240[42 15[{}1 83.022 /CMSY10 rf /Fc 212[124 43[{}1 172.188
/CMR17 rf /Fd 205[59 50[{}1 119.552 /CMR12 rf /Fe 135[96
20[73 72 89 97[{}4 172.188 /CMMI12 rf /Ff 134[44 44 60
44 46 32 33 33 44 46 42 46 69 23 2[23 46 42 25 37 46
37 46 42 9[85 2[60 46 2[56 65 2[52 2[30 4[63 9[23 3[42
42 42 42 42 42 2[23 4[32 32 40[{ T1Encoding ReEncodeFont }41
83.022 /SFRM1000 rf
%DVIPSBitmapFont: Fg ecrm0700 7 7
/Fg 7 55 df<000001800000018000000380000003000000070000000600000006000000
0E0000000C0000001C000000180000001800000038000000300000007000000060000000
60000000E0000000C0000001C00000018000000180000003800000030000000700000006
000000060000000E0000000C0000001C0000001800000038000000300000003000000070
00000060000000E0000000C0000000C0000001C000000180000003800000030000000300
000007000000060000000E0000000C0000000C0000001C00000018000000380000003000
0000300000007000000060000000E0000000C0000000C0000000193B7DAB21>47
D<00380000780001F8001FF800FEF800E0F80000F80000F80000F80000F80000F80000F8
0000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F8
0000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80001FC
00FFFFF8FFFFF815267BA521>49 D<00FF000003FFE0000E03F0001800F80030007C0060
007E0078003F00FC003F00FE001F80FE001F80FE001F80FE001F807C001F8000001F8000
001F0000003F0000003E0000007E0000007C000000F8000001F0000003E0000003C00000
078000000E0000001C0000003800000070018000E001800180018003000300060003000C
0003001FFFFF003FFFFF007FFFFE00FFFFFE00FFFFFE0019267DA521>I<00FF000003FF
E0000F01F8001C007C0030007E003C003E007E003F007E003F007E003F007E003F003C00
3F0000003E0000007E0000007C000000F8000001F0000007E00001FF800001FF00000001
E0000000F00000007C0000003E0000003F0000001F0000001F8000001F8038001F807C00
1F80FE001F80FE001F80FE001F00FC003F0078003E0070007C003800F8001F01F00007FF
C00000FF000019277DA521>I<0000380000003800000078000000F8000001F8000001F8
000003F8000007F8000006F800000CF800001CF8000018F8000030F8000070F8000060F8
0000C0F80001C0F8000180F8000300F8000700F8000E00F8000C00F8001C00F8003800F8
003000F8006000F800E000F800FFFFFFE0FFFFFFE00000F8000000F8000000F8000000F8
000000F8000000F8000000F8000001FC00003FFFE0003FFFE01B277EA621>I<18000C00
1F007C001FFFF8001FFFF0001FFFE0001FFF800019FC0000180000001800000018000000
18000000180000001800000018000000187F000019FFE0001F81F0001E0078001C003C00
18003E0000003E0000001F0000001F0000001F8000001F8030001F807C001F80FC001F80
FC001F80FC001F80FC001F00F0001F0060003E0070003E0030007C001C00F8000F03E000
03FFC00000FE000019277DA521>I<000FE000003FF80000F81C0001E0060003C01F0007
803F000F003F001F003F001E003F003E001E003E0000007C0000007C0000007C0400007C
3FC000FCFFF000FDC07800FF003C00FF003E00FE001E00FE001F00FE001F00FC001F80FC
001F80FC001F80FC001F807C001F807C001F807C001F807C001F803C001F003E001F001E
001E001E003E000F003C000780780003C1F00001FFC000007F000019277DA521>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh ecbx1440 14.4 22
/Fh 22 122 df<000000007FFC0000000000001FFFFF800000000001FFFFFFE000000000
07FFFFFFF8000000003FFFC00FFC00000000FFFC0001FE00000001FFF000007F00000007
FFC00003FF0000000FFF800007FF8000001FFF00000FFF8000003FFF00000FFF8000003F
FE00000FFF8000007FFC00000FFF8000007FFC00001FFFC00000FFFC00000FFF800000FF
F800000FFF800000FFF800000FFF800000FFF8000007FF000000FFF8000003FE000000FF
F8000000F8000000FFF800000000000000FFF800000000000000FFF800000000000000FF
F800000000000000FFF800000000000000FFF800000000000000FFF800000000000000FF
F800000000000000FFF800000000000000FFF800000000000000FFF80007FFFFC000FFFF
FFFFFFFFFFC000FFFFFFFFFFFFFFC000FFFFFFFFFFFFFFC000FFFFFFFFFFFFFFC000FFFF
FFFFFFFFFFC00000FFF800000FFFC00000FFF8000007FFC00000FFF8000007FFC00000FF
F8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FF
F8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FF
F8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FF
F8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FF
F8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FF
F8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FF
F8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FF
F8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FF
F8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FF
F8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC000FFFF
FFF807FFFFFFC0FFFFFFF807FFFFFFC0FFFFFFF807FFFFFFC0FFFFFFF807FFFFFFC0FFFF
FFF807FFFFFFC042547DD349>28 D<07E01FF83FFC7FFE7FFEFFFFFFFFFFFFFFFFFFFFFF
FF7FFE7FFE3FFC1FF807E000000000000000000000000000000000000000000000000000
000000000000000000000000000000000007E01FF83FFC7FFE7FFEFFFFFFFFFFFFFFFFFF
FFFFFF7FFE7FFE3FFC1FF807E0103576B425>58 D<00000000003F000000000000000000
00003F00000000000000000000007F80000000000000000000007F800000000000000000
00007F8000000000000000000000FFC000000000000000000000FFC00000000000000000
0001FFE000000000000000000001FFE000000000000000000001FFE00000000000000000
0003FFF000000000000000000003FFF000000000000000000007FFF80000000000000000
0007FFF800000000000000000007FFF80000000000000000000FFFFC0000000000000000
000FFFFC0000000000000000001FFFFE0000000000000000001FFFFE0000000000000000
001FFFFE0000000000000000003FFFFF0000000000000000003EFFFF0000000000000000
003E7FFF0000000000000000007E7FFF8000000000000000007C3FFF8000000000000000
00FC3FFFC00000000000000000F83FFFC00000000000000000F81FFFC000000000000000
01F81FFFE00000000000000001F00FFFE00000000000000003F00FFFF000000000000000
03E00FFFF00000000000000003E007FFF00000000000000007E007FFF800000000000000
07C003FFF8000000000000000FC003FFFC000000000000000F8003FFFC00000000000000
0F8001FFFC000000000000001F8001FFFE000000000000001F0001FFFE00000000000000
1F0000FFFE000000000000003F0000FFFF000000000000003E00007FFF00000000000000
7E00007FFF800000000000007C00007FFF800000000000007C00003FFF80000000000000
FC00003FFFC0000000000000F800001FFFC0000000000001F800001FFFE0000000000001
F000001FFFE0000000000001F000000FFFE0000000000003F000000FFFF0000000000003
E0000007FFF0000000000007E0000007FFF8000000000007C0000007FFF8000000000007
FFFFFFFFFFF800000000000FFFFFFFFFFFFC00000000000FFFFFFFFFFFFC00000000000F
FFFFFFFFFFFC00000000001FFFFFFFFFFFFE00000000001F00000000FFFE00000000003F
00000000FFFF00000000003E00000000FFFF00000000003E000000007FFF00000000007E
000000007FFF80000000007C000000003FFF8000000000FC000000003FFFC000000000F8
000000003FFFC000000000F8000000001FFFC000000001F8000000001FFFE000000001F0
000000000FFFE000000003F0000000000FFFF000000003E0000000000FFFF000000003E0
0000000007FFF000000007E00000000007FFF800000007C00000000003FFF800000007C0
0000000003FFF80000000F800000000003FFFC0000003FF00000000001FFFC0000FFFFFF
F000000FFFFFFFFFC0FFFFFFF000000FFFFFFFFFC0FFFFFFF000000FFFFFFFFFC0FFFFFF
F000000FFFFFFFFFC0FFFFFFF000000FFFFFFFFFC05A547CD363>65
D<FFFFFFFFFFFFFF0000000000FFFFFFFFFFFFFFF800000000FFFFFFFFFFFFFFFF000000
00FFFFFFFFFFFFFFFFE0000000FFFFFFFFFFFFFFFFF80000000007FFF000001FFFFE0000
000007FFF0000001FFFF0000000007FFF00000003FFFC000000007FFF00000000FFFE000
000007FFF000000003FFF000000007FFF000000001FFF800000007FFF000000000FFFC00
000007FFF0000000007FFE00000007FFF0000000003FFF00000007FFF0000000001FFF80
000007FFF0000000000FFF80000007FFF00000000007FFC0000007FFF00000000007FFE0
000007FFF00000000003FFE0000007FFF00000000003FFF0000007FFF00000000001FFF0
000007FFF00000000001FFF8000007FFF00000000001FFF8000007FFF00000000000FFFC
000007FFF00000000000FFFC000007FFF00000000000FFFC000007FFF00000000000FFFE
000007FFF000000000007FFE000007FFF000000000007FFE000007FFF000000000007FFF
000007FFF000000000007FFF000007FFF000000000007FFF000007FFF000000000007FFF
000007FFF000000000007FFF000007FFF000000000007FFF800007FFF000000000007FFF
800007FFF000000000007FFF800007FFF000000000007FFF800007FFF000000000007FFF
800007FFF000000000007FFF800007FFF000000000007FFF800007FFF000000000007FFF
800007FFF000000000007FFF800007FFF000000000007FFF800007FFF000000000007FFF
800007FFF000000000007FFF800007FFF000000000007FFF800007FFF000000000007FFF
800007FFF000000000007FFF800007FFF000000000007FFF000007FFF000000000007FFF
000007FFF000000000007FFF000007FFF000000000007FFF000007FFF000000000007FFF
000007FFF000000000007FFE000007FFF000000000007FFE000007FFF00000000000FFFE
000007FFF00000000000FFFC000007FFF00000000000FFFC000007FFF00000000000FFFC
000007FFF00000000001FFF8000007FFF00000000001FFF8000007FFF00000000003FFF0
000007FFF00000000003FFF0000007FFF00000000007FFE0000007FFF00000000007FFE0
000007FFF0000000000FFFC0000007FFF0000000001FFF80000007FFF0000000001FFF00
000007FFF0000000003FFE00000007FFF0000000007FFE00000007FFF000000001FFFC00
000007FFF000000003FFF000000007FFF00000000FFFE000000007FFF00000003FFFC000
000007FFF0000001FFFF8000000007FFF000001FFFFE000000FFFFFFFFFFFFFFFFF80000
00FFFFFFFFFFFFFFFFE0000000FFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFF8000000
00FFFFFFFFFFFFFF000000000059527CD165>68 D<FFFFFFFFFFFFFFFFFC00FFFFFFFFFF
FFFFFFFC00FFFFFFFFFFFFFFFFFC00FFFFFFFFFFFFFFFFFC00FFFFFFFFFFFFFFFFFC0000
07FFF000000FFFFE000007FFF0000000FFFE000007FFF00000001FFE000007FFF0000000
0FFE000007FFF000000007FE000007FFF000000003FE000007FFF000000001FE000007FF
F000000000FE000007FFF0000000007E000007FFF0000000007F000007FFF0000000003F
000007FFF0000000003F000007FFF0000000003F000007FFF0000000001F000007FFF000
0000001F000007FFF0000000001F000007FFF0000000001F000007FFF0000000001F0000
07FFF0000000001F800007FFF00003E0000F800007FFF00003E0000F800007FFF00003E0
000F800007FFF00003E0000F800007FFF00003E00000000007FFF00003E00000000007FF
F00003E00000000007FFF00007E00000000007FFF00007E00000000007FFF00007E00000
000007FFF0000FE00000000007FFF0001FE00000000007FFF0003FE00000000007FFF001
FFE00000000007FFFFFFFFE00000000007FFFFFFFFE00000000007FFFFFFFFE000000000
07FFFFFFFFE00000000007FFFFFFFFE00000000007FFF001FFE00000000007FFF0003FE0
0000000007FFF0001FE00000000007FFF0000FE00000000007FFF00007E00000000007FF
F00007E00000000007FFF00007E00000000007FFF00003E00000000007FFF00003E00000
000007FFF00003E00000000007FFF00003E00000000007FFF00003E00000000007FFF000
03E00000000007FFF00003E00000000007FFF00000000000000007FFF000000000000000
07FFF00000000000000007FFF00000000000000007FFF00000000000000007FFF0000000
0000000007FFF00000000000000007FFF00000000000000007FFF00000000000000007FF
F00000000000000007FFF00000000000000007FFF00000000000000007FFF00000000000
000007FFF00000000000000007FFF00000000000000007FFF00000000000000007FFF000
00000000000007FFF00000000000000007FFF00000000000000007FFF0000000000000FF
FFFFFFFFF000000000FFFFFFFFFFF000000000FFFFFFFFFFF000000000FFFFFFFFFFF000
000000FFFFFFFFFFF00000000049527CD153>70 D<FFFFFFFFFF80FFFFFFFFFF80FFFFFF
FFFF80FFFFFFFFFF80FFFFFFFFFF800007FFF000000007FFF000000007FFF000000007FF
F000000007FFF000000007FFF000000007FFF000000007FFF000000007FFF000000007FF
F000000007FFF000000007FFF000000007FFF000000007FFF000000007FFF000000007FF
F000000007FFF000000007FFF000000007FFF000000007FFF000000007FFF000000007FF
F000000007FFF000000007FFF000000007FFF000000007FFF000000007FFF000000007FF
F000000007FFF000000007FFF000000007FFF000000007FFF000000007FFF000000007FF
F000000007FFF000000007FFF000000007FFF000000007FFF000000007FFF000000007FF
F000000007FFF000000007FFF000000007FFF000000007FFF000000007FFF000000007FF
F000000007FFF000000007FFF000000007FFF000000007FFF000000007FFF000000007FF
F000000007FFF000000007FFF000000007FFF000000007FFF000000007FFF000000007FF
F000000007FFF000000007FFF000000007FFF000000007FFF000000007FFF000000007FF
F000000007FFF000000007FFF000000007FFF000000007FFF000000007FFF000000007FF
F000000007FFF000000007FFF00000FFFFFFFFFF80FFFFFFFFFF80FFFFFFFFFF80FFFFFF
FFFF80FFFFFFFFFF8029527DD130>73 D<00000FFE00001C000000FFFFF0003C000007FF
FFFC007C00001FFFFFFF00FC00007FFFFFFFC1FC0000FFF001FFE1FC0001FF80001FFBFC
0003FF000007FFFC0007FC000001FFFC000FF8000000FFFC001FF00000003FFC001FF000
00001FFC003FE00000000FFC003FE00000000FFC007FE000000007FC007FC000000003FC
007FC000000003FC007FC000000001FC00FFC000000001FC00FFC000000001FC00FFC000
000000FC00FFE000000000FC00FFE000000000FC00FFF0000000007C00FFF0000000007C
00FFF8000000007C00FFFC000000007C00FFFE0000000000007FFF0000000000007FFFC0
00000000007FFFF800000000007FFFFF80000000003FFFFFF8000000003FFFFFFFC00000
001FFFFFFFFC0000000FFFFFFFFF8000000FFFFFFFFFF0000007FFFFFFFFFC000003FFFF
FFFFFE000001FFFFFFFFFF800000FFFFFFFFFFC000007FFFFFFFFFE000001FFFFFFFFFF0
000007FFFFFFFFF8000001FFFFFFFFF80000007FFFFFFFFC00000007FFFFFFFE00000000
7FFFFFFE0000000003FFFFFF00000000003FFFFF000000000003FFFF800000000000FFFF
8000000000003FFF8000000000001FFF8000000000000FFFC0000000000007FFC0000000
000003FFC0F80000000003FFC0F80000000001FFC0F80000000001FFC0F80000000001FF
C0F80000000000FFC0FC0000000000FFC0FC0000000000FFC0FC0000000000FFC0FC0000
000000FF80FE0000000000FF80FE0000000000FF80FF0000000001FF80FF0000000001FF
00FF8000000001FF00FFC000000003FE00FFE000000003FE00FFF000000007FC00FFFC00
00000FF800FFFE0000001FF800FFFFC000003FF000FF7FF80000FFE000FE1FFF8007FFC0
00FE07FFFFFFFF0000FC01FFFFFFFC0000F8007FFFFFF00000F0000FFFFFC00000E00000
7FFC0000003A5479D249>83 D<3FFFFFFFFFFFFFFFFFFC3FFFFFFFFFFFFFFFFFFC3FFFFF
FFFFFFFFFFFFFC3FFFFFFFFFFFFFFFFFFC3FFFFFFFFFFFFFFFFFFC3FFFC0007FFF0003FF
FC3FFC00007FFF00003FFC7FF000007FFF00000FFE7FE000007FFF000007FE7FC000007F
FF000003FE7F8000007FFF000001FE7F0000007FFF000000FE7F0000007FFF000000FE7E
0000007FFF0000007E7E0000007FFF0000007E7E0000007FFF0000007E7C0000007FFF00
00003E7C0000007FFF0000003E7C0000007FFF0000003E7C0000007FFF0000003E7C0000
007FFF0000003EFC0000007FFF0000003FF80000007FFF0000001FF80000007FFF000000
1FF80000007FFF0000001FF80000007FFF0000001FF80000007FFF0000001FF80000007F
FF0000001F000000007FFF00000000000000007FFF00000000000000007FFF0000000000
0000007FFF00000000000000007FFF00000000000000007FFF00000000000000007FFF00
000000000000007FFF00000000000000007FFF00000000000000007FFF00000000000000
007FFF00000000000000007FFF00000000000000007FFF00000000000000007FFF000000
00000000007FFF00000000000000007FFF00000000000000007FFF00000000000000007F
FF00000000000000007FFF00000000000000007FFF00000000000000007FFF0000000000
0000007FFF00000000000000007FFF00000000000000007FFF00000000000000007FFF00
000000000000007FFF00000000000000007FFF00000000000000007FFF00000000000000
007FFF00000000000000007FFF00000000000000007FFF00000000000000007FFF000000
00000000007FFF00000000000000007FFF00000000000000007FFF00000000000000007F
FF00000000000000007FFF00000000000000007FFF00000000000000007FFF0000000000
0000007FFF00000000000000007FFF00000000000000007FFF00000000000000007FFF00
000000000000007FFF00000000000000007FFF00000000000000007FFF00000000000000
007FFF00000000000000007FFF000000000001FFFFFFFFFFFFC0000001FFFFFFFFFFFFC0
000001FFFFFFFFFFFFC0000001FFFFFFFFFFFFC0000001FFFFFFFFFFFFC00050517BD05B
>I<00003FFE000000000007FFFFE0000000001FFFFFFC000000007FFFFFFF00000001FF
C00FFFC0000003FE0003FFE0000007FF0000FFF0000007FF80007FF800000FFFC0007FFC
00000FFFC0003FFE00000FFFC0003FFE00000FFFC0001FFF00000FFFC0001FFF00000FFF
C0001FFF00000FFFC0000FFF800007FF80000FFF800003FF00000FFF800001FE00000FFF
8000000000000FFF8000000000000FFF8000000000000FFF8000000000000FFF80000000
00000FFF8000000000000FFF800000000007FFFF8000000003FFFFFF800000007FFFFFFF
80000003FFFFFFFF8000001FFFF00FFF8000007FFF000FFF800000FFFC000FFF800003FF
F0000FFF800007FFC0000FFF80000FFF80000FFF80001FFF00000FFF80003FFF00000FFF
80003FFE00000FFF80007FFC00000FFF80007FFC00000FFF81F0FFFC00000FFF81F0FFF8
00000FFF81F0FFF800000FFF81F0FFF800000FFF81F0FFF800001FFF81F0FFF800001FFF
81F0FFFC00003FFF81F07FFC00003FFF81F07FFE00007FFF81F03FFE0000F7FFC3F03FFF
0001E3FFC3E01FFFC007E3FFFFE007FFF01F81FFFFC003FFFFFF00FFFF8000FFFFFC007F
FF00001FFFF0003FFC000001FF800007F0003C387CB642>97 D<000003FFE0000000003F
FFFE00000000FFFFFF80000003FFFFFFE000000FFF003FF800003FFC0007FC00007FF800
0FFE0000FFF0001FFE0001FFE0003FFF0003FFC0003FFF0007FF80003FFF0007FF80003F
FF000FFF00003FFF001FFF00003FFF001FFE00003FFF003FFE00001FFE003FFE00000FFC
003FFE000007F8007FFE00000000007FFC00000000007FFC00000000007FFC0000000000
FFFC0000000000FFFC0000000000FFFC0000000000FFFC0000000000FFFC0000000000FF
FC0000000000FFFC0000000000FFFC0000000000FFFC0000000000FFFC0000000000FFFC
0000000000FFFC0000000000FFFC00000000007FFC00000000007FFE00000000007FFE00
000000007FFE00000000003FFE00000000003FFF00000000001FFF0000000F801FFF0000
000F800FFF8000001F800FFF8000001F0007FFC000003F0003FFE000003E0001FFF00000
7E0000FFF80000FC00007FFC0001F800003FFF0007F000000FFFC01FE0000007FFFFFF80
000001FFFFFE000000003FFFF80000000003FF80000031387CB63A>99
D<000007FF80000000007FFFF800000001FFFFFE00000007FFFFFF8000001FFF03FFE000
003FFC007FF000007FF0003FF80000FFE0001FFC0001FFC0000FFC0003FF800007FE0007
FF800007FF000FFF000003FF000FFF000003FF801FFE000003FF801FFE000001FF803FFE
000001FFC03FFE000001FFC03FFE000001FFC07FFC000001FFC07FFC000001FFE07FFC00
0000FFE07FFC000000FFE0FFFC000000FFE0FFFC000000FFE0FFFFFFFFFFFFE0FFFFFFFF
FFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFC0000000000FFFC0000000000FFFC000000
0000FFFC0000000000FFFC0000000000FFFC00000000007FFC00000000007FFC00000000
007FFC00000000007FFE00000000003FFE00000000003FFE00000000003FFE00000003E0
1FFF00000003E01FFF00000007E00FFF00000007C007FF8000000FC007FF8000000F8003
FFC000001F8001FFE000003F0000FFF000007E00007FFC0001FC00001FFF0007F800000F
FFE03FF0000003FFFFFFC0000000FFFFFF800000003FFFFC0000000001FFE0000033387C
B63C>101 D<00001FFE0000FE000001FFFFE007FF80000FFFFFFC1FFFC0003FFFFFFF7F
FFE0007FF807FFFF07E001FFE001FFF07FE003FFC000FFF07FE007FF80007FF83FE007FF
00003FF83FC00FFF00003FFC1FC01FFF00003FFE07001FFE00001FFE00001FFE00001FFE
00003FFE00001FFF00003FFE00001FFF00003FFE00001FFF00003FFE00001FFF00003FFE
00001FFF00003FFE00001FFF00003FFE00001FFF00003FFE00001FFF00003FFE00001FFF
00001FFE00001FFE00001FFE00001FFE00001FFF00003FFE00000FFF00003FFC000007FF
00003FF8000007FF80007FF8000003FFC000FFF0000001FFE001FFE0000000FFF807FF80
000001FFFFFFFF00000003EFFFFFFC00000003C1FFFFE000000007C01FFE000000000780
00000000000007800000000000000FC00000000000000FC00000000000000FC000000000
00000FE00000000000000FE00000000000000FF00000000000000FFC0000000000000FFF
FFFFFE00000007FFFFFFFFF0000007FFFFFFFFFC000007FFFFFFFFFF800003FFFFFFFFFF
C00003FFFFFFFFFFF00001FFFFFFFFFFF80000FFFFFFFFFFFC00007FFFFFFFFFFC0001FF
FFFFFFFFFE0007FFFFFFFFFFFE000FFC000003FFFF001FF80000003FFF003FF00000000F
FF007FE000000007FF807FE000000003FF80FFC000000003FF80FFC000000001FF80FFC0
00000001FF80FFC000000001FF80FFC000000001FF80FFC000000001FF80FFE000000003
FF807FE000000003FF007FF000000007FF003FF000000007FE001FF80000000FFC001FFE
0000003FFC0007FF0000007FF00003FFC00001FFE00000FFFC001FFF8000003FFFFFFFFE
0000000FFFFFFFF800000001FFFFFFC0000000000FFFF80000003B4F7CB542>103
D<003FF8000000000000FFFFF8000000000000FFFFF8000000000000FFFFF80000000000
00FFFFF8000000000000FFFFF800000000000003FFF800000000000000FFF80000000000
0000FFF800000000000000FFF800000000000000FFF800000000000000FFF80000000000
0000FFF800000000000000FFF800000000000000FFF800000000000000FFF80000000000
0000FFF800000000000000FFF800000000000000FFF800000000000000FFF80000000000
0000FFF800000000000000FFF800000000000000FFF800000000000000FFF80000000000
0000FFF800000000000000FFF800000000000000FFF800000000000000FFF80000000000
0000FFF800000000000000FFF8001FFC00000000FFF800FFFF80000000FFF803FFFFE000
0000FFF80FFFFFF8000000FFF81FC07FFC000000FFF87E003FFE000000FFF8F8001FFF00
0000FFF9F0001FFF000000FFF9E0000FFF800000FFFBC0000FFF800000FFFF80000FFF80
0000FFFF000007FFC00000FFFF000007FFC00000FFFE000007FFC00000FFFE000007FFC0
0000FFFC000007FFC00000FFFC000007FFC00000FFFC000007FFC00000FFFC000007FFC0
0000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC0
0000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC0
0000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC0
0000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC0
0000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC0
0000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC0
0000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC0
0000FFF8000007FFC00000FFF8000007FFC000FFFFFFF807FFFFFFC0FFFFFFF807FFFFFF
C0FFFFFFF807FFFFFFC0FFFFFFF807FFFFFFC0FFFFFFF807FFFFFFC042537CD249>I<00
3F000000FFC00001FFE00003FFF00003FFF00007FFF80007FFF80007FFF80007FFF80007
FFF80007FFF80003FFF00003FFF00001FFE00000FFC000003F0000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000001FF800FFFFF800FFFFF800FFFFF800FFFFF800FFFFF80001
FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000
FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000
FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000
FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000
FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF800FFFFFFF0FFFFFFF0FF
FFFFF0FFFFFFF0FFFFFFF01C547CD324>I<003FF800FFFFF800FFFFF800FFFFF800FFFF
F800FFFFF80003FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FF
F80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FF
F80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FF
F80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FF
F80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FF
F80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FF
F80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FF
F80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FF
F80000FFF800FFFFFFF8FFFFFFF8FFFFFFF8FFFFFFF8FFFFFFF81D537CD224>108
D<003FF0001FF8000001FF800000FFFFF000FFFF80000FFFF80000FFFFF003FFFFE0003F
FFFE0000FFFFF00FFFFFF000FFFFFF0000FFFFF03F80FFF803F80FFF8000FFFFF07E007F
FC07E007FFC00003FFF0F8003FFE0F8003FFE00000FFF1F0001FFE1F0001FFE00000FFF3
E0001FFF3E0001FFF00000FFF3C0001FFF3C0001FFF00000FFF780001FFF780001FFF000
00FFF700000FFFF00000FFF80000FFFF00000FFFF00000FFF80000FFFE00000FFFE00000
FFF80000FFFE00000FFFE00000FFF80000FFFC00000FFFC00000FFF80000FFFC00000FFF
C00000FFF80000FFFC00000FFFC00000FFF80000FFF800000FFF800000FFF80000FFF800
000FFF800000FFF80000FFF800000FFF800000FFF80000FFF800000FFF800000FFF80000
FFF800000FFF800000FFF80000FFF800000FFF800000FFF80000FFF800000FFF800000FF
F80000FFF800000FFF800000FFF80000FFF800000FFF800000FFF80000FFF800000FFF80
0000FFF80000FFF800000FFF800000FFF80000FFF800000FFF800000FFF80000FFF80000
0FFF800000FFF80000FFF800000FFF800000FFF80000FFF800000FFF800000FFF80000FF
F800000FFF800000FFF80000FFF800000FFF800000FFF80000FFF800000FFF800000FFF8
0000FFF800000FFF800000FFF80000FFF800000FFF800000FFF80000FFF800000FFF8000
00FFF80000FFF800000FFF800000FFF80000FFF800000FFF800000FFF80000FFF800000F
FF800000FFF80000FFF800000FFF800000FFF80000FFF800000FFF800000FFF80000FFF8
00000FFF800000FFF80000FFF800000FFF800000FFF80000FFF800000FFF800000FFF800
00FFF800000FFF800000FFF80000FFF800000FFF800000FFF800FFFFFFF80FFFFFFF80FF
FFFFF8FFFFFFF80FFFFFFF80FFFFFFF8FFFFFFF80FFFFFFF80FFFFFFF8FFFFFFF80FFFFF
FF80FFFFFFF8FFFFFFF80FFFFFFF80FFFFFFF865367BB56E>I<003FF0001FFC000000FF
FFF000FFFF800000FFFFF003FFFFE00000FFFFF00FFFFFF80000FFFFF01FC07FFC0000FF
FFF07E003FFE000003FFF0F8001FFF000000FFF1F0001FFF000000FFF1E0000FFF800000
FFF3C0000FFF800000FFF780000FFF800000FFF7000007FFC00000FFFF000007FFC00000
FFFE000007FFC00000FFFE000007FFC00000FFFC000007FFC00000FFFC000007FFC00000
FFFC000007FFC00000FFFC000007FFC00000FFF8000007FFC00000FFF8000007FFC00000
FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000
FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000
FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000
FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000
FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000
FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000
FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC00000FFF8000007FFC000FF
FFFFF807FFFFFFC0FFFFFFF807FFFFFFC0FFFFFFF807FFFFFFC0FFFFFFF807FFFFFFC0FF
FFFFF807FFFFFFC042367CB549>I<000001FFC000000000003FFFFE0000000000FFFFFF
8000000003FFFFFFE00000000FFF80FFF80000003FFC001FFE0000007FF00007FF000000
FFE00003FF800001FFC00001FFC00003FF800000FFE00003FF0000007FE00007FF000000
7FF0000FFF0000007FF8000FFE0000003FF8001FFE0000003FFC001FFE0000003FFC003F
FE0000003FFE003FFC0000001FFE003FFC0000001FFE007FFC0000001FFF007FFC000000
1FFF007FFC0000001FFF007FFC0000001FFF00FFFC0000001FFF80FFFC0000001FFF80FF
FC0000001FFF80FFFC0000001FFF80FFFC0000001FFF80FFFC0000001FFF80FFFC000000
1FFF80FFFC0000001FFF80FFFC0000001FFF80FFFC0000001FFF80FFFC0000001FFF80FF
FC0000001FFF807FFC0000001FFF007FFC0000001FFF007FFC0000001FFF003FFC000000
1FFE003FFE0000003FFE003FFE0000003FFE001FFE0000003FFC001FFE0000003FFC000F
FF0000007FF8000FFF0000007FF80007FF800000FFF00003FF800000FFE00001FFC00001
FFC00000FFE00003FF8000007FF00007FF0000003FFC001FFE0000001FFF80FFFC000000
07FFFFFFF000000001FFFFFFC0000000003FFFFE000000000003FFE000000039387CB642
>I<003FF8007FF0000000FFFFF807FFFF000000FFFFF81FFFFFC00000FFFFF87FFFFFF0
0000FFFFF9FF00FFFC0000FFFFFFF8003FFF000003FFFFE0000FFF800000FFFF800007FF
C00000FFFF000003FFE00000FFFE000003FFF00000FFFC000001FFF00000FFF8000000FF
F80000FFF8000000FFFC0000FFF80000007FFC0000FFF80000007FFE0000FFF80000007F
FE0000FFF80000003FFE0000FFF80000003FFF0000FFF80000003FFF0000FFF80000003F
FF0000FFF80000003FFF0000FFF80000001FFF8000FFF80000001FFF8000FFF80000001F
FF8000FFF80000001FFF8000FFF80000001FFF8000FFF80000001FFF8000FFF80000001F
FF8000FFF80000001FFF8000FFF80000001FFF8000FFF80000001FFF8000FFF80000001F
FF8000FFF80000001FFF8000FFF80000001FFF8000FFF80000003FFF0000FFF80000003F
FF0000FFF80000003FFF0000FFF80000003FFF0000FFF80000007FFE0000FFF80000007F
FE0000FFF80000007FFC0000FFF8000000FFFC0000FFF8000000FFF80000FFFC000001FF
F80000FFFC000001FFF00000FFFE000003FFE00000FFFF000007FFC00000FFFF80000FFF
800000FFFFE0001FFF000000FFFFF0007FFE000000FFF9FE01FFF8000000FFF8FFFFFFF0
000000FFF83FFFFFC0000000FFF807FFFE00000000FFF800FFE000000000FFF800000000
000000FFF800000000000000FFF800000000000000FFF800000000000000FFF800000000
000000FFF800000000000000FFF800000000000000FFF800000000000000FFF800000000
000000FFF800000000000000FFF800000000000000FFF800000000000000FFF800000000
000000FFF800000000000000FFF800000000000000FFF800000000000000FFF800000000
0000FFFFFFF80000000000FFFFFFF80000000000FFFFFFF80000000000FFFFFFF8000000
0000FFFFFFF80000000000414D7DB549>I<0003FFC00E00001FFFFC1E0000FFFFFF7E00
03FFFFFFFE0007FE003FFE000FF0000FFE001FE00003FE003FC00001FE003F800000FE00
7F800000FE007F0000007E007F0000007E00FF0000003E00FF0000003E00FF8000003E00
FF8000003E00FFC000003E00FFF000000000FFFC00000000FFFF800000007FFFFE000000
7FFFFFF000003FFFFFFE00003FFFFFFF80001FFFFFFFE0000FFFFFFFF00007FFFFFFFC00
03FFFFFFFE0000FFFFFFFF00003FFFFFFF00000FFFFFFF800001FFFFFF8000000FFFFFC0
0000003FFFC000000007FFE000000001FFE0F8000000FFE0F80000007FE0FC0000003FE0
FC0000003FE0FC0000001FE0FE0000001FE0FE0000001FE0FE0000001FC0FF0000001FC0
FF8000003FC0FF8000003F80FFC000003F80FFE000007F00FFF80000FF00FFFC0003FE00
FFFF801FFC00FE7FFFFFF000F81FFFFFC000F007FFFF0000E0007FF000002B387CB634>
115 D<00007C00000000007C00000000007C00000000007C00000000007C00000000007C
0000000000FC0000000000FC0000000000FC0000000000FC0000000001FC0000000001FC
0000000001FC0000000003FC0000000003FC0000000007FC0000000007FC000000000FFC
000000001FFC000000003FFC000000007FFC00000000FFFC00000003FFFC0000000FFFFF
FFFE00FFFFFFFFFE00FFFFFFFFFE00FFFFFFFFFE00FFFFFFFFFE00007FFC000000007FFC
000000007FFC000000007FFC000000007FFC000000007FFC000000007FFC000000007FFC
000000007FFC000000007FFC000000007FFC000000007FFC000000007FFC000000007FFC
000000007FFC000000007FFC000000007FFC000000007FFC000000007FFC000000007FFC
000000007FFC000000007FFC000000007FFC000000007FFC000000007FFC000000007FFC
000000007FFC000000007FFC000F80007FFC000F80007FFC000F80007FFC000F80007FFC
000F80007FFC000F80007FFC000F80007FFC000F80007FFC000F80007FFC000F80007FFC
000F80007FFC001F00003FFE001F00003FFE001F00001FFE003E00001FFF003E00000FFF
807C000007FFC1F8000003FFFFF0000000FFFFE00000003FFF8000000003FE0000294D7E
CB33>I<FFFFFFE0001FFFFCFFFFFFE0001FFFFCFFFFFFE0001FFFFCFFFFFFE0001FFFFC
FFFFFFE0001FFFFC01FFF8000001FF0000FFF80000007C0000FFFC000000FC00007FFC00
0000F800007FFE000001F800003FFE000001F000003FFF000001F000003FFF000003F000
001FFF800003E000001FFF800007E000000FFF800007C000000FFFC0000FC0000007FFC0
000F80000007FFE0001F80000003FFE0001F00000003FFF0001F00000003FFF0003F0000
0001FFF8003E00000001FFF8007E00000000FFF8007C00000000FFFC00FC000000007FFC
00F8000000007FFE00F8000000007FFE01F8000000003FFF01F0000000003FFF03F00000
00001FFF03E0000000001FFF87E0000000000FFF87C0000000000FFFCFC00000000007FF
CF800000000007FFEF800000000007FFFF800000000003FFFF000000000003FFFF000000
000001FFFE000000000001FFFE000000000000FFFC000000000000FFFC0000000000007F
F80000000000007FF80000000000007FF80000000000003FF00000000000003FF0000000
0000001FE00000000000001FE00000000000000FC00000000000000FC00000000000000F
C00000000000000F800000000000001F800000000000001F000000000000003F00000000
0000003E000000000000007E000000001FC0007C000000003FE0007C000000007FF000FC
00000000FFF800F800000000FFF801F800000000FFF801F000000000FFF803E000000000
FFF807E000000000FFF80FC0000000007FF01F80000000007FE03F00000000007FC07F00
000000003F81FC00000000001FFFF800000000000FFFF0000000000003FFC00000000000
00FE0000000000003E4D7DB445>121 D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608 -916
a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -608
-916 a 0 TeXcolorgray Black -600 -600 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -600 -600 a -600
-600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 -600 a -600 -600 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -600 -600 a 0 TeXcolorgray
-600 -600 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -600 -600 a -600 -600 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -600 -600 a -600
-600 a
SDict begin H.S end
 -600 -600 a -600 -600 a
SDict begin 12 H.A end
 -600 -600 a -600 -600
a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -600 -600 a -600 -600 a
tx@Dict begin { 30.00183 -21.0022 } PutCoor PutBegin  end
 -600 -600 a 9 x Fh(Sp)t(eci\034cation)-600
-600 y
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
600.0 -26.9989 30.00183 -26.9989   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
510.00366 -28.50037 0.0 -28.50037   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 5.9967 -292.50183 } PutCoor PutBegin  end
 -600
-600 a 4182 -585 a Fg(1/)4248 -585 y
SDict begin H.S end
 4248 -585 a 0 TeXcolorgray
Fg(6)p 0 TeXcolorgray 4282 -623 a
SDict begin H.R end
 4282 -623 a 4282 -585
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.6) cvn H.B /ANN pdfmark end
 4282 -585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
600.0 -283.5022 30.00183 -283.5022   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
510.00366 -282.00073 0.0 -282.00073   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 30.00183 -41.99982 } PutCoor PutBegin  end
 -600 -600 a -572 -543 a Ff(Description)27 b(of)g(what)h(program)
d(do)r(es)j(from)f(users)f(p)r(oin)n(t)i(of)g(view)-600
-295 y Fe(ax)-415 -358 y Fd(2)-315 -295 y Fc(+)38 b Fe(bx)g
Fc(+)g Fe(c)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray 1870
2140 a Ff(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 30.00183 -21.0022 } PutCoor PutBegin  end
 -600 -600 a 9 x Fh(Analysis)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
600.0 -26.9989 30.00183 -26.9989   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
510.00366 -28.50037 0.0 -28.50037   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 5.9967 -292.50183 } PutCoor PutBegin  end
 -600 -600 a 4182
-585 a Fg(2/)4248 -585 y
SDict begin H.S end
 4248 -585 a 0 TeXcolorgray Fg(6)p
0 TeXcolorgray 4282 -623 a
SDict begin H.R end
 4282 -623 a 4282 -585 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.6) cvn H.B /ANN pdfmark end
 4282
-585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
600.0 -283.5022 30.00183 -283.5022   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
510.00366 -282.00073 0.0 -282.00073   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 30.00183 -41.99982 } PutCoor PutBegin  end
 -600 -600 a -540 -543 a Fb(\017)41 b Ff(Inputs:)-558
-443 y Fb(\017)g Ff(Pro)r(cess:)-558 -344 y Fb(\017)g
Ff(Outputs:)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray 1870
2140 a Ff(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 30.00183 -21.0022 } PutCoor PutBegin  end
 -600 -600 a 9 x Fh(Design)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
600.0 -26.9989 30.00183 -26.9989   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
510.00366 -28.50037 0.0 -28.50037   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-600 -600 a
tx@Dict begin { 5.9967 -292.50183 } PutCoor PutBegin  end
 -600 -600 a 4182 -585 a Fg(3/)4248 -585 y
SDict begin H.S end

4248 -585 a 0 TeXcolorgray Fg(6)p 0 TeXcolorgray 4282
-623 a
SDict begin H.R end
 4282 -623 a 4282 -585 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.6) cvn H.B /ANN pdfmark end
 4282 -585 a -600 -600
a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
600.0 -283.5022 30.00183 -283.5022   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
510.00366 -282.00073 0.0 -282.00073   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 30.00183 -41.99982 } PutCoor PutBegin  end
 -600
-600 a -572 -538 a Ff(List)27 b(eac)n(h)g(mo)r(dule)h(\(compilation)f
(unit\))i(with)f(short)e(description)-600 -600 y
tx@Dict begin  PutEnd  end
 -600
-600 a 0 TeXcolorgray 1870 2140 a Ff(3)p 0 TeXcolorgray
eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 30.00183 -21.0022 } PutCoor PutBegin  end
 -600 -600 a 9 x Fh(Implemen)l(tation:)58 b(h)44 b(File)-600
-600 y
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
600.0 -26.9989 30.00183 -26.9989   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
510.00366 -28.50037 0.0 -28.50037   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 5.9967 -292.50183 } PutCoor PutBegin  end
 -600
-600 a 4182 -585 a Fg(4/)4248 -585 y
SDict begin H.S end
 4248 -585 a 0 TeXcolorgray
Fg(6)p 0 TeXcolorgray 4282 -623 a
SDict begin H.R end
 4282 -623 a 4282 -585
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.6) cvn H.B /ANN pdfmark end
 4282 -585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
600.0 -283.5022 30.00183 -283.5022   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
510.00366 -282.00073 0.0 -282.00073   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 30.00183 -41.99982 } PutCoor PutBegin  end
 -600 -600 a -572 -538 a Ff(W)-7 b(rite)27 b(algorithm)g(for)g
(exp)r(ected)h(inputs)g(and)f(outputs)h(...or)f(describ)r(e)g(program)e
(state)j(\(v)-5 b(ariables\))-600 -322 y Fa(/*)43 b(source)e(code)h(*/)
-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray 1870 2140 a Ff(4)p
0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 30.00183 -21.0022 } PutCoor PutBegin  end
 -600 -600 a 9 x Fh(Implemen)l(tation:)58 b(cpp)45 b(File)-600
-600 y
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
600.0 -26.9989 30.00183 -26.9989   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
510.00366 -28.50037 0.0 -28.50037   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 5.9967 -292.50183 } PutCoor PutBegin  end
 -600
-600 a 4182 -585 a Fg(5/)4248 -585 y
SDict begin H.S end
 4248 -585 a 0 TeXcolorgray
Fg(6)p 0 TeXcolorgray 4282 -623 a
SDict begin H.R end
 4282 -623 a 4282 -585
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.6) cvn H.B /ANN pdfmark end
 4282 -585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
600.0 -283.5022 30.00183 -283.5022   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
510.00366 -282.00073 0.0 -282.00073   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 30.00183 -41.99982 } PutCoor PutBegin  end
 -600 -600 a -572 -538 a Ff(W)-7 b(rite)27 b(algorithm)g(for)g
(exp)r(ected)h(inputs)g(and)f(outputs)h(...or)f(describ)r(e)g(program)e
(state)j(\(v)-5 b(ariables\))-600 -322 y Fa(/*)43 b(source)e(code)h(*/)
-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray 1870 2140 a Ff(5)p
0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 30.00183 -21.0022 } PutCoor PutBegin  end
 -600 -600 a 20 x Fh(T)-11 b(est)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
600.0 -26.9989 30.00183 -26.9989   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
510.00366 -28.50037 0.0 -28.50037   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 5.9967 -292.50183 } PutCoor PutBegin  end
 -600 -600 a 4182
-585 a Fg(6/)4248 -585 y
SDict begin H.S end
 4248 -585 a 0 TeXcolorgray Fg(6)p
0 TeXcolorgray 4282 -623 a
SDict begin H.R end
 4282 -623 a 4282 -585 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.6) cvn H.B /ANN pdfmark end
 4282
-585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
600.0 -283.5022 30.00183 -283.5022   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43047 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
510.00366 -282.00073 0.0 -282.00073   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43047 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 30.00183 -41.99982 } PutCoor PutBegin  end
 -600 -600 a -545 -543 a Ff(Sev)n(eral)53 b(testcases)h(to)h(v)n
(erify)e(that)i(program)e(meets)i(requiremen)n(ts)e(with)j(exp)r(ected)
f(output)g(man)n(ually)f(calculated)g(for)g(eac)n(h)-558
-443 y Fb(\017)41 b Ff(T)-7 b(estcase)26 b(1:)-558 -344
y Fb(\017)41 b Ff(T)-7 b(estcase)26 b(2:)-600 -600 y
tx@Dict begin  PutEnd  end

-600 -600 a 0 TeXcolorgray 1870 2140 a Ff(6)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
